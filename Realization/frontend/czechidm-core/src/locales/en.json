{
  "app": {
    "name": "CzechIdM",
    "author": {
      "name": "BCV solutions s.r.o.",
      "homePage": "http://www.bcvsolutions.eu"
    },
    "serviceDesk": "ServiceDesk",
    "helpDesk": "Help",
    "version": {
      "frontend": "Version",
      "backend": "Backend version",
      "releaseDate": "Release date"
    },
    "documentation": {
      "url": "https://wiki.czechidm.com"
    }
  },
  "format": {
    "date": "DD.MM.YYYY",
    "time": "HH:mm",
    "datetime": "DD.MM.YYYY HH:mm:ss",
    "datetimemilis": "DD.MM.YYYY HH:mm:ss.SSS",
    "times": "HH:mm:ss",
    "duration": "DD HH:mm:ss"
  },
  "message": {
    "success": {
      "common": "The operation completed successfully",
      "create": "Creation successfully completed",
      "update": "Update successfully completed",
      "delete": "Deletion successfully completed",
      "upload": "File successfully uploaded"
    },
    "task": {
      "detailNotFound":"This task is not supported!",
      "taskSolvedOrNotFound": "This task doesn't exist or has already been resolved."
    },
    "failed": "Operation failed",
    "notImplemented": "This operation is not available yet"
  },
  "label": {
    "id": "Id",
    "action": "Actions",
    "otherAttributes": "Other attributes",
    "selectAll": "Select / unselect all",
    "validFrom": "$t(entity.validFrom)",
    "validTill": "$t(entity.validTill)",
    "select": "Select ...",
    "default": "Default",
    "download": "Download",
    "searchSelect": "Select or type to search ...",
    "enabled": "Enabled",
    "disabled": "Inactive",
    "property": "Attribute",
    "value": "Value",
    "yes": "Yes",
    "no": "No",
    "readOnly": "Read only"
  },
  "button": {
    "activate": "Activate",
    "add": "Add",
    "addMore": "Add in bulk",
    "back": "Back",
    "cancel": "Cancel",
    "close": "Close",
    "apply": "Apply",
    "confirm": "Confirm",
    "create": "Create",
    "createContinue": "Create and edit",
    "createNew": "Create and add another",
    "deactivate": "Deactivate",
    "deactivatePrepare": "Preparing deactivation ...",
    "delete": "Delete",
    "detail": "Detail",
    "download": "$t(label.download)",
    "edit": "Edit",
    "filter": {
      "toogle": "Filter",
      "use": "Filter",
      "cancel": "Cancel filter"
    },
    "logout": "Log Out",
    "no": "No",
    "refresh": "Refresh",
    "select": "Select",
    "send": "Send",
    "sending": "Sending",
    "save": "Save",
    "saveAndClose": "Save and exit",
    "saveAndContinue": "Save and continue",
    "saveAndNew": "Save and add another",
    "saving": "Saving",
    "yes": "Yes",
    "set": "Set",
    "crop": "Crop & save"
  },
  "filter": {
    "dateFrom": {
      "label": "from",
      "placeholder": "Date from"
    },
    "dateTill": {
      "label": "To",
      "placeholder": "Date to"
    },
    "date": {
      "placeholder": "Date"
    },
    "text": {
      "help": {
        "header": "Filtering",
        "body": "<div>Filter is using <strong>like</strong> operator:<br /><ul><li>looking for any occurrence of the specified string,</li><li>available wildcard characters:<ul><li><strong>%</strong> - matches zero or more characters,</li><li><strong>_</strong> - single character.</li></ul></li></ul>If we want to look for special characters, we add a backslash <strong>\\\\%,\\\\.</strong></div>"
      }
    },
    "module": {
      "label": "Modul",
      "placeholder": "Modul"
    }
  },
  "action": {
    "delete": {
      "action": "Remove",
      "header": "Remove record",
      "header_plural": "Remove records",
      "message": "Do you want to remove selected record [<strong>{{record}}</strong>]?",
      "message_plural": "Selected records: [<strong>{{records}}</strong>].<br /><br /> Do you want to remove <strong>{{count}}</strong> selected records?",
      "error": "An error occurred while removing [{{record}}].",
      "success": "Selected record [{{record}}] successfully deleted",
      "success_plural": "Selected records [{{records}}] were successfully deleted",
      "approve": "Record deletion [{{record}}] has to be approved, task successfully created",
      "approve_plural": "Records deletion [{{records}}] have to be approved, tasks successfully created",
      "accepted": "Record deletion [{{record}}] run asynchronously (deletion has to be approved or run as long running task)",
      "accepted_plural": "Records deletion [{{records}}] run asynchronously (deletion has to be approved or run as long running task)"
    },
    "activate": {
      "action": "Activate",
      "header_0": "N/A",
      "header": "Activate record",
      "header_plural": "Activate records",
      "message_0": "N/A",
      "message" : "Do you really want to activate selected record [<strong>{{record}}</strong>]?",
      "message_plural": "Selected records: [<strong>{{records}}</strong>].<br /><br />Do you really want to activate <strong>{{count}}</strong> selected records?",
      "error": "An error occurred while activating [{{record}}]",
      "success_0": "N/A",
      "success": "Selected record [{{record}}] successfully activated",
      "success_plural": "Selected records [{{records}}] were successfully activated"
    },
    "deactivate": {
      "action": "Deactivate",
      "header_0": "N/A",
      "header": "Deactivate record",
      "header_plural": "Deactivate records",
      "message_0": "N/A",
      "message": "Do you want to deactivate selected record [<strong>{{record}}</strong>]?",
      "message_plural": "Selected records: [<strong>{{records}}</strong>].<br /><br />Do you want to deactivate <strong>{{count}}</strong> selected records?",
      "error": "An error occurred while removing [{{record}}]",
      "success_0": "N/A",
      "success": "Selected record [{{record}}] were successfully deactivated",
      "success_plural": "Selected records [{{records}}] were successfully deactivated"
    },
    "redeploy": {
      "action": "Recover from disk (redeploy)",
      "header_0": "N/A",
      "header": "Recover record from disk",
      "header_plural": "Recover records from disk",
      "message_0": "N/A",
      "message": "Do you want to recover selected record [<strong>{{record}}</strong>] from disk? This action is not possible to undo.",
      "message_plural": "Selected records: [<strong>{{records}}</strong>].<br /><br />Do you want to recover <strong>{{count}}</strong> selected records from disk? This action is not possible to undo.",
      "error": "An error occurred while recover [{{record}}]",
      "success_0": "N/A",
      "success": "N/A",
      "success_plural": "Selected record [{{record}}] were successfully recovered",
      "failed_0": "Selected record [{{records}}] failed recover, XML file don't exist on disk.",
      "failed": "Selected record [{{records}}] failed recover, XML file don't exist on disk.",
      "failed_plural": "Selected records [{{records}}] failed recover, XML file don't exist on disk."
    },
    "backup": {
      "action": "Backup",
      "header_0": "N/A",
      "header": "Backup record",
      "header_plural": "Backup records",
      "message_0": "N/A",
      "message": "Do you want to backup  [<strong>{{record}}</strong>]?",
      "message_plural": "Selected records: [<strong>{{records}}</strong>].<br /><br />Do you want to backup <strong>{{count}}</strong> selected records?",
      "error": "An error occurred while backup selected record: [{{record}}",
      "success_0": "N/A",
      "success": "Selected record [{{record}}] were successfully backup",
      "success_plural": "Selected records [{{records}}] were successfully backup",
      "failed_0": "Selected record [{{records}}] were not successfully backup",
      "failed": "Selected record [{{records}}] were not successfully backup",
      "failed_plural": "Selected records [{{records}}] were not successfully backup"
    },
    "duplicate": {
      "action": "Duplicate",
      "header_0": "N/A",
      "header": "Duplicate record",
      "header_plural": "Duplicate records",
      "message_0": "N/A",
      "message": "Do you want to duplicate selected record [<strong>{{record}}</strong>]?",
      "message_plural": "Selected records: [<strong>{{records}}</strong>].<br /><br /> Do you want to duplicate <strong>{{count}}</strong> selected records?",
      "error": "An error occurred while duplicating [{{record}}].",
      "success": "Selected record [{{record}}] successfully duplicated",
      "success_plural": "Selected records [{{records}}] were successfully duplicated",
      "failed": "Selected record [{{records}}] were not successfully duplicated",
      "failed_plural": "Selected records [{{records}}] were not successfully duplicated"
    },
    "save": {
      "success_0": "N/A",
      "success": "Record [{{record}}] successfully saved"
    },
    "cancel": {
      "action": "Cancel",
      "header_0": "N/A",
      "header": "Cancel record",
      "header_plural": "Cancel records",
      "message_0": "N/A",
      "message": "Do you want to cancel selected record [<strong>{{record}}</strong>]?",
      "message_plural": "Selected records: [<strong>{{records}}</strong>].<br /><br /> Do you want to cancel <strong>{{count}}</strong> selected records?",
      "error": "An error occurred while canceling [{{record}}].",
      "success_0": "N/A",
      "success": "Selected record [{{record}}] successfully canceled",
      "success_plural": "Selected records [{{records}}] were successfully canceled",
      "approve": "Record cancel [{{record}}] has to be approved, task successfully created",
      "approve_plural": "Records cancel [{{records}}] have to be approved, tasks successfully created",
      "accepted": "Record cancel [{{record}}] run asynchronously (cancel has to be approved or run as long running task)",
      "accepted_plural": "Records cancel [{{records}}] run asynchronously (cancel has to be approved or run as long running task)"
    }
  },
  "bulkAction": {
    "selectAllRecordsWarning": "Performing a bulk operation [{{action}}] on currently filtered items. To this date <strong>{{date}}</strong> is actual count <strong class=\"highlight\">{{count}}</strong>. Processed items may be different.",
    "removedRecord": "The following entity will not be counted in the bulk job processing: <b>[{{entities}}]</b>.",
    "removedRecord_plural": "The following entities will not be included in the bulk job processing: <b>[{{entities}}]</b>.",
    "created": "Bulk action [{{name}}] was successfully run in a long running task id: [{{longRunningTaskId}}]",
    "message": "Performing the bulk action on select record: <b>[{{entities}}]</b>.",
    "message_plural": "Performing the bulk action on {{count}} records: <b>[{{entities}}]</b>",
    "button": {
      "execute": "Execute"
    },
    "insufficientReadPermission": "You don't have sufficient rights to view the progress of the bulk operation."
  },
  "environment": {
    "development": {
      "short": "D",
      "label": "Development",
      "title": "Development environment"
    },
    "test": {
      "short": "T",
      "label": "Test",
      "title": "Test environment"
    }
  },
  "navigation" : {
    "toogle": "Toggle navigation",
    "collapse": {
      "label": "Collapse menu"
    },
    "expand": {
      "label": "Expand menu"
    },
    "menu": {
      "home": "Dashboard",
      "profile": {
        "label": "Profile",
        "title": "My profile"
      },
      "subordinates": {
        "label": "My subordinates",
        "title": "My subordinates"
      },
      "roles": {
        "label": "User roles",
        "title": "Assigned roles"
      },
      "tasks": {
        "label" : "Tasks",
        "title" : "My tasks"
      },
      "task" : "Task",
      "identities": {
        "label": "Users",
        "title": "List of users"
      },
      "messages": "Messages history",
      "configuration": "Configuration",
      "userLabel": "{{entityId}}",
      "login": "$t(content.login.header)",
      "logout": "Log Out",
      "system": "Settings",
      "workflow": {
        "definitions": "Workflow definitions",
        "historicProcess": "Workflow history",
        "title": "Workflow"
      },
      "audit": {
        "profile": "Audit of user"
      },
      "separator": {
        "system": "System settings"
      },
      "notifications": {
        "label": "Notifications",
        "title": "Notifications"
      }
    }
  },
  "component" : {
    "basic": {
      "HelpIcon" : {
        "title": "Help"
      },
      "SelectBox" : {
        "noResultsText": "No result",
        "searchPromptText": "Start typing ...",
        "searchingText": "Searching ...",
        "results": "Shown <strong>{{count}}</strong> of <strong>{{total}}</strong> records ..."
      },
      "Table" : {
        "Pagination" : {
          "recordInfo": "<strong title='First record on page'>{{minRecord}}</strong> - <strong title='Last record on page'>{{maxRecord}}</strong> of <strong title='Total number of records'>{{totalRecords}}</strong> records",
          "size": "Number of records",
          "page": {
            "title": "Page",
            "select": "Go to page {{page}}"
          },
          "from": "of"
        },
        "noData": "No results found"
      },
      "ProgressBar": {
        "start": "Processing",
        "processed": "Processed",
        "label": "$t(component.basic.ProgressBar.processed) {{now}} / {{max}}"
      },
      "Dropzone": {
        "infoText": "Drag files here, or click to select files.",
        "readOnly": "Preview is not available."
      },
      "TextField": {
        "confidential": {
          "edit": "Set new value"
        }
      }
    },
    "advanced": {
      "EntityInfo": {
        "link": {
          "detail": {
            "label": "Show full detail"
          },
          "popover": {
            "title": "Show info card"
          }
        }
      },
      "EntitySelectBox": {
        "componentNotFound": "Select box component for type [{{entityType}}] is not registered. Fix component descriptor.",
        "defaultHelpBlock": "Searching is done in the following attributes: {{searchInFields}}."
      },
      "Filter": {
        "option": {
          "yes": "Yes",
          "no": "No"
        },
        "FilterDate": {
          "face": {
            "placeholder": "$t(filter.date.placeholder)"
          },
          "from": {
            "placeholder": "$t(filter.dateFrom.placeholder)"
          },
          "till": {
            "placeholder": "$t(filter.dateTill.placeholder)"
          }
        }
      },
      "Table": {
        "bulk-action": {
          "selection_empty": "Select records ...",
          "selection_0": "Select records ...",
          "selection": "Operation with selected record:",
          "selection_plural": "Operation with ({{count}}) selected records:",
          "notImplemented": "Sorry, this operation is not available yet."
        },
        "error": {
          "load": "Error during loading records to the table."
        },
        "button": {
          "refresh": "Reload records"
        },
        "noData": "$t(component.basic.Table.noData)",
        "filter": {
          "notEmpty": "Filter is set",
          "empty": "Filter is not set"
        }
      },
      "Tree": {
        "loading": "Loading ..."
      },
      "EavForm": {
        "multiple": {
          "label": "multi",
          "title": "Supports entering multiple values. Each value to new line.",
          "unsupported": {
            "title": "Attribute persistent type [{{name}}] with face [{{face}}] cannot be multiple",
            "formDefinition": {
              "title": "Form definition has to be fixed",
              "type": "Type",
              "name": "Name",
              "code": "Code"
            }
          }
        },
        "single": {
          "unsupported": {
            "title": "Attribute persistent type [{{name}}] with face [{{face}}] cannot be single value",
            "formDefinition": {
              "title": "Form definition has to be fixed",
              "type": "Type",
              "name": "Name",
              "code": "Code"
            }
          }
        },
        "persistentType": {
          "unsupported": {
            "title": "Unsupported persistent type [{{name}}] with face [{{face}}]",
            "confidential": "Confidential for type [{{name}}] with face [{{face}}] is not supported"
          }
        },
        "faceType": {
          "CHAR": "$t(enums.PersistentTypeEnum.CHAR)",
          "TEXT": "$t(enums.PersistentTypeEnum.TEXT)",
          "SHORTTEXT": "$t(enums.PersistentTypeEnum.SHORTTEXT)",
          "INT": "$t(enums.PersistentTypeEnum.INT)",
          "LONG": "$t(enums.PersistentTypeEnum.LONG)",
          "DOUBLE": "$t(enums.PersistentTypeEnum.DOUBLE)",
          "BOOLEAN": "$t(enums.PersistentTypeEnum.BOOLEAN)",
          "DATE": "$t(enums.PersistentTypeEnum.DATE)",
          "DATETIME": "$t(enums.PersistentTypeEnum.DATETIME)",
          "BYTEARRAY": "$t(enums.PersistentTypeEnum.BYTEARRAY)",
          "UUID": "$t(enums.PersistentTypeEnum.UUID)",
          "CURRENCY": "Currency",
          "TEXTAREA": "TextArea",
          "RICHTEXTAREA": "WYSIWYG editor",
          "IDENTITY-SELECT": "Select identity (SelectBox)",
          "ROLE-SELECT": "Select role (SelectBox)",
          "FORM-DEFINITION-SELECT": "Select form definition (SelectBox)",
          "BOOLEAN-SELECT": "$t(enums.PersistentTypeEnum.BOOLEAN) (SelectBox)",
          "ATTACHMENT": "$t(enums.PersistentTypeEnum.ATTACHMENT)"
        },
        "attributes": {
          "empty": "Form definition was found, but doesn't contain editable attributes."
        }
      },
      "Recaptcha": {
        "required": "Check 'you are not a robot' please"
      },
      "PasswordField":{
        "newPassword": {
          "label": "New password"
        },
        "newPasswordAgain": {
          "label": "Re-enter new password"
        },
        "password": {
          "label": "Password"
        },
        "passwordAgain": {
          "label": "Re-enter password"
        }
      },
      "OperationResult": {
        "link": {
          "detail": {
            "label": "Show full detail"
          },
          "popover": {
            "title": "Show info card"
          }
        },
        "result": {
          "header": "Result",
          "code": "Code"
        }
      },
      "CreatableSelectBox": {
        "textCreator": "Create a new filtering option: [{{value}}]?",
        "noResultsText": "Create new values for filtering",
        "searchPromptText": "Start typing for create new options for filtering ..."
      }
    }
  },
  "enums" : {
    "ApiOperationTypeEnum" : {
      "CREATE" : "create",
      "UPDATE" : "edit",
      "GET" : "get",
      "DELETE" : "delete"
    },
    "RoleTypeEnum": {
      "SYSTEM": "System",
      "BUSINESS": "Business",
      "TECHNICAL": "Technical",
      "LOGIN": "Login"
    },
    "AutomaticRoleRequestTypeEnum": {
      "TREE": "Role by tree structure",
      "ATTRIBUTE": "Role by attribute"
    },
    "ScriptCategoryEnum": {
      "DEFAULT": "Standard",
      "TRANSFORM_FROM": "Transformation from",
      "TRANSFORM_TO": "Transformation to",
      "SYSTEM": "System"
    },
    "RoleAssignTypeEnum": {
      "UNASSIGNED": "not assigned",
      "WAIT_ASSIGN": "not assigned (waiting for assign)",
      "WAIT_APPROVE": "not assigned (waiting for approval)",
      "ASSIGNED": "Assign",
      "FINITE_ASSIGNMENT": "Assign (with expiration)",
      "QUARANTINE": "Assign (in quarantine)",
      "WAIT_CHANGE_APPROVE": "Assign (update waiting for approval)",
      "WAIT_REMOVE_APPROVE": "Assign (removing waiting for approval)"
    },
    "OperationResultEnum": {
      "SUCCESS": "success",
      "FAILED": "failed"
    },
    "OperationTypeEnum": {
      "ADD": "ADD",
      "APPROVE": "APPROVE",
      "CHANGE": "CHANGE",
      "CREATE": "CREATE",
      "DENY": "DENY",
      "DISABLE": "DISABLE",
      "ENABLE": "ENABLE",
      "MOVE": "MOVE",
      "REMOVE": "REMOVE",
      "RENAME": "RENAME",
      "SET": "SET",
      "UNLINK": "UNLINK",
      "UPDATE": "UPDATE",
      "WANT_ADD": "WANT_ADD"
    },
    "PersistentTypeEnum": {
      "CHAR": "Char",
      "TEXT": "Text",
      "SHORTTEXT": "Short text (2000 chars)",
      "INT": "Integer",
      "LONG": "Long",
      "DOUBLE": "Double",
      "BOOLEAN": "Boolean",
      "DATE": "Date",
      "DATETIME": "Date + time",
      "BYTEARRAY": "Byte array",
      "UUID": "Uuid identifier",
      "ATTACHMENT": "Attachment"
    },
    "ObjectClassEnum": {
      "Identity": "Identity",
      "Role": "Role",
      "Organisation": "Organization",
      "Resource": "Resource",
      "WorkflowDefinition": "WorkflowDefinition"
    },
    "TaskStateEnum": {
      "APPROVED": "Approved",
      "DENIED": "Denied",
      "PENDING": "Waiting",
      "ESCALATED": "Escalated"
    },
    "DelegateStateEnum": {
      "PENDING": "Waiting for approval",
      "DENIED": "Denied",
      "APPROVED": "Approved"
    },
    "NotificationStateEnum": {
      "ALL": "Send",
      "PARTLY": "Partly",
      "NOT": "Not sent"
    },
    "AccessTypeEnum": {
      "DENY_ALL": "Access denied to all",
      "PERMIT_ALL": "Allowed access to all",
      "NOT_AUTHENTICATED": "Not authenticated",
      "IS_AUTHENTICATED": "Login required",
      "HAS_ANY_AUTHORITY": "At least one of the privileges",
      "HAS_ALL_AUTHORITIES": "Assigned all the permissions"
    },
    "LogTypeEnum":  {
      "INFO": "INFO",
      "DEBUG": "DEBUG",
      "TRACE": "TRACE",
      "WARN": "WARN",
      "ERROR": "ERROR"
    },
    "AuditModificationEnum": {
      "ADD": "create",
      "MOD": "update",
      "DEL": "delete"
    },
    "PasswordPolicyTypeEnum": {
      "VALIDATE": "validation",
      "GENERATE": "generation"
    },
    "PasswordPolicyGenerateTypeEnum": {
      "RANDOM": "Random",
      "PASSPHRASE": "Passphrase",
      "PREFIX_AND_SUFFIX": "Prefix and suffix"
    },
    "PasswordPolicyIdentityAttributeEnum": {
      "USERNAME": "User name",
      "LASTNAME": "Last name",
      "FIRSTNAME": "First Name",
      "EMAIL": "E-mail"
    },
    "NotificationLevelEnum": {
      "SUCCESS": "SUCCESS",
      "INFO": "INFO",
      "WARNING": "WARNING",
      "ERROR": "ERROR"
    },
    "OperationStateEnum":{
      "CREATED": "Created",
      "RUNNING": "Running",
      "EXECUTED": "Executed",
      "EXCEPTION": "Failed",
      "NOT_EXECUTED": "Not executed",
      "BLOCKED": "Blocked",
      "CANCELED": "Canceled"
    },
    "TriggerTypeEnum": {
      "SIMPLE": "One-time start",
      "CRON": "Cron",
      "DEPENDENT": "Other task"
    },
    "RolePriorityEnum": {
      "NONE": "None (0)",
      "MINOR": "Minor (2)",
      "MAJOR": "Major (3)",
      "CRITICAL": "Critical (4)",
      "TRIVIAL": "Trivial (1)"
    },
    "RoleRequestStateEnum": {
      "CREATED": "Created",
      "CONCEPT": "Concept",
      "EXECUTED": "Executed",
      "CANCELED": "Canceled",
      "APPROVED": "Approved",
      "DISAPPROVED": "Disapproved",
      "IN_PROGRESS": "In progress",
      "EXCEPTION": "Exception",
      "DUPLICATED": "Duplicated"
    },
    "ConceptRoleRequestStateEnum": {
      "ADD": "Add",
      "UPDATE": "Update",
      "REMOVE": "Remove"
    },
    "RecursionTypeEnum": {
      "NO": "Without recursion",
      "DOWN": "Down by structure",
      "UP": "Up by structure"
    },
    "ScriptAuthorityTypeEnum": {
      "CLASS_NAME": "Class",
      "SERVICE": "Service"
    },
    "ContractStateEnum": {
      "EXCLUDED": "Excluded",
      "DISABLED": "$t(label.disabled)"
    },
    "AutomaticRoleAttributeRuleTypeEnum": {
      "IDENTITY": "Identity attribute",
      "IDENTITY_EAV": "Extended attribute of identity",
      "CONTRACT": "Contract attribute",
      "CONTRACT_EAV": "Extended attribute of contract"
    },
    "AutomaticRoleAttributeRuleComparisonEnum": {
      "EQUALS": "Equals"
    },
    "IdentityAttributeEnum": {
      "USERNAME": "User name (String)",
      "EXTERNAL_CODE": "Personal number (String)",
      "DISABLED": "Disabled (boolean)",
      "FIRSTNAME": "First name (String)",
      "LASTNAME": "Surname (String)",
      "TITLE_BEFORE": "Title before (String)",
      "TITLE_AFTER": "Title after (String)",
      "DESCRIPTION": "Description (String)",
      "PHONE": "Phone (String)",
      "EMAIL": "Email (String)"
    },
    "ContractAttributeEnum": {
      "IDENTITY": "Owner (IdmIdentity - Id or username)",
      "VALID_FROM": "Valid from (LocalDate)",
      "VALID_TILL": "Valid till (LocalDate)",
      "WORK_POSITION": "Work position (IdmTreeNode - Id or code)",
      "POSITION": "Name of position (String)",
      "EXTERNE": "Externe (boolean)",
      "MAIN": "Main relation (boolean)",
      "DESCRIPTION": "Description (String)",
      "DISABLED": "Disabled (boolean)",
      "GUARANTEES": "Guarantees (IdmIdentity - List of ids or usernames)",
      "POSITIONS": "Other positions (IdmTreeNode - List of ids or codes)",
      "STATE": "State (ContractState - String)"
    },
    "ContractSliceAttributeEnum": {
      "IDENTITY": "Owner (IdmIdentity - Id or username)",
      "VALID_FROM": "Valid from of slice (LocalDate)",
      "CONTRACT_VALID_FROM": "Valid from of contract (LocalDate)",
      "CONTRACT_VALID_TILL": "Valid till of contract (LocalDate)",
      "WORK_POSITION": "Work position (IdmTreeNode - Id or code)",
      "POSITION": "Name of position (String)",
      "EXTERNE": "Externe (boolean)",
      "MAIN": "Main relation (boolean)",
      "DESCRIPTION": "Description (String)",
      "DISABLED": "Disabled (boolean)",
      "GUARANTEES": "Guarantees (IdmIdentity - List of ids or usernames)",
      "STATE": "State (ContractState - String)",
      "CONTRACT_CODE": "Code of the parent contract (String - same for all slices)"
    },
    "IdentityStateEnum": {
      "CREATED": "Created",
      "NO_CONTRACT": "No contract",
      "FUTURE_CONTRACT": "Future contract",
      "VALID": "Valid",
      "PASSWORD_EXPIRED": "Password expired",
      "LEFT": "Left",
      "DISABLED": "$t(label.disabled)",
      "DISABLED_MANUALLY": "$t(label.disabled) - manually"
    },
    "PriorityTypeEnum": {
      "IMMEDIATE": "Immediate",
      "HIGH": "High",
      "NORMAL": "Normal"
    },
    "DateFaceEnum": {
      "TODAY": "Today",
      "THIS_MONTH": "This month",
      "BETWEEN": "Between"
    }
  },
  "dashboard": {
    "profileDashboard" : {
      "header": "Your basic information",
      "goToProfil": "Go to profile"
    },
    "longRunningTaskDashboard": {
      "header": "Your long running task"
    }
  },
  "permission": {
    "base" : {
      "ADMIN": "Administration (all)",
      "COUNT": "Number of records",
      "AUTOCOMPLETE": "View in select box (autocomplete)",
      "READ": "Read",
      "CREATE": "Create",
      "UPDATE": "Update",
      "DELETE": "Delete",
      "EXECUTE": "Execute",
      "PASSWORDCHANGE": "Password change",
      "CHANGEPERMISSION": "Manage authorizations"
    },
    "group": {
      "AUTHORIZATIONPOLICY": "Permissions",
      "APP": "App configuration",
      "AUDIT": "Audit",
      "CONFIGURATION": "Configuration (app)",
      "IDENTITY": "Users",
      "IDENTITYROLE": "Assigned roles",
      "IDENTITYCONTRACT": "Contracted positions",
      "PROFILE": "User profile (picture)",
      "CONTRACTSLICE": "Time slices",
      "CONTRACTGUARANTEE": "Contracted position's guarantees",
      "CONTRACTPOSITION": "Other contract positions",
      "CONTRACTSLICEGUARANTEE": "Time slices 's guarantees",
      "MODULE": "Modules",
      "NOTIFICATION": "Notifications",
      "ROLE": "Roles",
      "ROLECATALOGUE": "Role catalog",
      "ROLECATALOGUEROLE": "Role catalog - assigned roles",
      "ROLEGUARANTEE": "$t(entity.Role.guarantees) - by identity",
      "ROLEGUARANTEEROLE": "$t(entity.Role.guarantees) - by role",
      "ROLECOMPOSITION": "Business roles definition",
      "ROLETREENODE": "Automatic roles (organization structure)",
      "TREENODE": "Tree nodes",
      "TREETYPE": "Structure types",
      "SCRIPT": "Scripts",
      "FORMDEFINITION": "Forms - definitions",
      "FORMATTRIBUTE": "Forms - attributes",
      "FORMVALUE": "Forms - values",
      "NOTIFICATIONCONFIGURATION": "Notifications - configuration",
      "NOTIFICATIONTEMPLATE": "Notifications - templates",
      "PASSWORDPOLICY": "Password policy",
      "ROLEREQUEST": "Requests for assigned roles",
      "REQUEST": "Requests (universal)",
      "REQUESTITEM": "Requests - items (universal)",
      "SCHEDULER": "Scheduler",
      "WORKFLOWDEFINITION": "Workflow - definitions",
      "CONFIDENTIALSTORAGEVALUE": "Confidential storage",
      "WORKFLOWTASK": "Workflow - tasks",
      "AUTOMATICROLEATTRIBUTE": "Automatic roles (attributes)",
      "AUTOMATICROLEATTRIBUTERULE": "Rules for automatic roles (attributes)",
      "AUTOMATICROLEREQUEST": "Requests for automatic roles",
      "AUTOMATICROLEATTRIBUTERULEREQUEST": "Requests for automatic roles (rules of the attributes)",
      "TOKEN": "Token",
      "GENERATEVALUE": "Value generate"
    }
  },
  "content": {
    "error": {
      "401": {
        "title": "401",
        "description": "To access must be logged."
      },
      "403": {
        "title": "403",
        "description": "Insufficient access rights."
      },
      "404": {
        "title": "404",
        "description": "Page not found.",
        "record": "Record ID <strong>{{id}}</strong> does not exist."
      },
      "500": {
        "title": "Oups, this is embarrassing"
      },
      "503": {
        "title": "503",
        "description": "The service is currently not available.",
        "note": "Please, try it later."
      },
      "syntax-error": {
        "message": "Server communication failed, try to execute operation again. If the issue persists, please contact your application administrator."
      }
    },
    "about": {
      "header": "About app",
      "title": "$t(content.about.header)",
      "sourceCodeOn": "Project source available at",
      "link": "$t(content.about.header)"
    },
    "login": {
      "header": "Log in",
      "title": "$t(content.login.header)",
      "username": "$t(entity.Identity.username)",
      "password": "Password",
      "admin": "Administrator",
      "button": {
        "login": "$t(content.login.header)",
        "passwordChange": "$t(content.password.change.button.passwordChange)",
        "logout": {
          "value": "Logout",
          "title": "Log out completely and continue on new logging"
        }
      }
    },
    "logout": {
      "header": "Log Out",
      "title": "$t(content.logout.header)",
      "message": {
        "logout": "Log Out."
      }
    },
    "password": {
      "change": {
        "header": "Change password",
        "title": "Change password",
        "passwordOld": "Old password",
        "password": "New password",
        "passwordChangeTooltip": "Password strength:",
        "passwordAgain": {
          "label": "Re-enter new password",
          "placeholder": "Password again"
        },
        "button": {
          "passwordChange": "Change password"
        },
        "message": {
          "passwordChange": {
            "info": "This form can be used to change the password for your user identity",
            "required": "Required to change password CzechIdM",
            "idmNotEnabled": "Password change for CzechIdM is not allowed",
            "success": {
              "title": "Changing the password is OK",
              "message": "Your password was successfully changed on all your accounts."
            }
          },
          "passwordMustChange": {
            "success": {
              "title": "Changing the password is OK",
              "message": "Your CzechIdM password was successfully changed."
            }
          }
        },
        "help": {
          "header": "Change password",
          "body": "<div class=\"alert alert-info\">The change password form is only for external employees. An internal employee can change his password after signing in to his profile.</div>To change your password, fill out the form. In this form, you enter your username, your existing password, the new password you want, and finally your new password for review. You can then confirm the change by clicking the <button class=\"btn btn-xs btn-success\">Change password</button> button."
        }
      },
      "strength" : {
        "weak": "weak",
        "okay": "normal",
        "strong": "strong",
        "great": "perfect"
      }
    },
    "messages": {
      "header": "Messages history",
      "title": "Messages",
      "empty": "No messages found.",
      "button": {
        "removeAll": "Remove all messages."
      },
      "help": {
        "header": "Messages history",
        "body": "The list shows the history of the messages displayed in the user interface. If the message is closed earlier, it can be found, checked, copied, and so on. <br /> <br /> The list is sorted by date when the message is displayed in descending order and displays the last <strong> 25 </ strong>."
      }
    },
    "passwordPolicies": {
      "header": "Password policies",
      "title": "Password policies",
      "edit": {
        "header": "Password policy details",
        "title": "Password policy details"
      },
      "basic": {
        "header": "Settings",
        "title": "Settings"
      },
      "advanced": {
        "header": "Enhanced control",
        "title": "Enhanced control"
      },
      "characters": {
        "header": "Characters",
        "title": "Characters"
      },
      "create": {
        "title": "New configuration of password policies",
        "header": "New configuration of password policies"
      },
      "validation": {
        "maxLength": "Maximum password length: {{0}}",
        "minLength": "Minimum password length: {{0}}",
        "minNumber": "Minimum number of digits: {{0}}",
        "minUpperChar": "Minimum number uppercase characters: {{0}}",
        "prohibited": "Password contains illegal characters: {{0}}",
        "minLowerChar": "Minimum number of lowercase characters: {{0}}",
        "minSpecialChar": "Minimum number of special characters: {{0}}",
        "policiesNames": "Password does not meet these password policies: {{0}}",
        "policiesNamesPreValidation": "Password have to meet these password policies: {{0}}",
        "minRulesToFulfillCount": "Minimum mandatory rules to fulfill: {{0}}",
        "minRulesToFulfill": "Fill in at least {{count}} of the following rules: {{0}}",
        "passwordSimilarUsername": "Password cannot be similar to login: {{0}}",
        "passwordSimilarEmail": "Password cannot be similar to email: {{0}}",
        "passwordSimilarFirstName": "Password cannot be similar to first name: {{0}}",
        "passwordSimilarLastName": "Password cannot be similar to surname: {{0}}",
        "date": "Password can not be change now, try again: {{0}}",
        "advancedControlValidateType": "Enhanced control is available only for validate policies.",
        "specialCharacterBase":{
          "list": "List of special characters for password policies: {{0}}",
          "text": "Special characters: {{0}}"
          },
        "forbiddenCharacterBase": {
          "list": "List of forbidden characters for password policies: {{0}}",
          "text": "Forbidden characters: {{0}}"
          },
        "passwordSimilarUsernamePreValidate": "login",
        "passwordSimilarEmailPreValidate": "email",
        "passwordSimilarFirstNamePreValidate": "first name",
        "passwordSimilarLastNamePreValidate": "surname",
        "passwordSimilarPreValidate": "Password cannot be similar to",
        "passwordHintPreValidate": "Hint for a ",
        "passwordHintPreValidatePwd": "new password",
        "passwordHintPreValidateHeader": "Password have to meet this requirements:",
        "maxHistorySimilar": "The password must be different from the last {{0}} passwords.",
        "prevalidationLink": {
          "title": "Rules for new password"
        }
      },
      "save": {
        "success": "Password policy [{{name}}] successfully saved."
      },
      "rulesHelp": "Select which rules are required set number of how many additional rules newly created password must fulfill at least.",
      "emptyValues": "To omit any field, leave it empty.",
      "prefixAndSuffixGeneratedHelp": "Prefix and suffix are not counted in the total length and another validation during the password generation. For example, using prefix and suffix may generate a password longer than the maximum length."
    },
    "configuration": {
      "header": "Configuration",
      "title": "Configuration",
      "edit": {
        "header": "{{name}} <small>detail configuration items</small>"
      },
      "create": {
        "header": "New configuration item"
      },
      "save": {
        "success": "Configuration items [{{name}}] successfully saved",
        "sucessBulk": "Configuration items were successfully saved"
      },
      "addMore":{
        "header": "Add more configuration items",
        "configurationArea": {
          "header": "Configuration items",
          "helpBlock": "Can be added more configuration items. Comments after character '#' are ignored."
        }
      },
      "configurable": "Configurable items <small>editable, can override static items</small>",
      "environment": "Static environment configuration items <small>$t(label.readOnly)</small>",
      "fromFile": "Application configuration from configuration files <small>application.properties</small>",
      "fromEnvironment": "Environment configuration <small>backend</small>",
      "guarded": "If item key contains values: [<strong>{{guarded}}</strong>] the item is automatically confidential and non-public. Items with key beginning with [<strong>idm.sec.</strong>] can not be public.",
      "confidential": {
        "help": "Item is stored in encrypted repository"
      },
      "secured": {
        "notAllowed": "You do not have permission to edit the system configuration",
        "help": "Public items are accessible without logging. Confidential items can be public."
      },
      "nameDoesntContainPrefixAlert": "Be careful, you may be inserting a configuration option that does not have the prefix <strong>'{{prefix}}'</strong>. This option may not work correctly. For more information, visit <a href='$t(app.documentation.url)/devel/documentation/application_configuration/backend' target='_blank'> app configuration </a>.",
      "forceSave": {
        "header": "Overwrite configurable item",
        "message": "Configurable item [<strong>{{name}}</strong>] is already existing with value [<strong>{{value}}</strong>]. Do you want to overwrite it?"
      }
    },
    "tasks-summary": {
      "summary": "Tasks list",
      "approvalTasks": "Approved tasks",
      "filter": {
        "createdDateFrom": {
          "label": "Created from",
          "placeholder": "Created from"
        },
        "createdDateTill": {
          "label": "Created till",
          "placeholder": "Created till"
        },
        "closeDateFrom": {
          "label": "Closed by",
          "placeholder": "The task was finished by"
        },
        "closeDateTill": {
          "label": "Ended till",
          "placeholder": "The task was completed till"
        },
        "approvedBy": {
          "label": "Approver",
          "placeholder": "Who approved the task"
        },
        "taskState": {
          "label": "State",
          "placeholder": "Task state"
        },
        "taskName": {
          "label": "Task name",
          "placeholder": "Task name"
        },
        "taskId": {
          "label": "ID",
          "placeholder": "Task ID"
        },
        "note": {
          "label": "Note",
          "placeholder": "Task note"
        }
      }
    },
    "tasks-assigned": {
      "assigned": "Assigned tasks",
      "action": {
        "approve": {
          "action": "Approve task",
          "header": "Task to approve",
          "header_plural": "Tasks to approve",
          "message": "Do you really want to approve the selected task?",
          "message_plural": "Do you really want to approve <strong>{{count}}</strong> the selected tasks?",
          "error": "When approving the task {{task}} task error occurred.",
          "success": "The task successfully approved",
          "success_plural": "Tasks were successfully approved"
        },
        "disapprove": {
          "action": "Reject",
          "header": "Reject task",
          "header_plural": "Reject tasks",
          "message": "Do you really want to reject the selected task?",
          "message_plural": "Do you really want to reject <strong>{{count}}</strong> the selected tasks?",
          "error": "When rejecting the task {{task}} task error occurred",
          "success": "Task successfully approved",
          "success_plural": "Tasks were successfully approved"
        }
      }
    },
    "task":{
      "instances": {
        "header": "Unresolved tasks",
        "title": "Unresolved tasks"
      },
      "instance": {
        "header": "Task details",
        "title": "Task details",
        "name": "Activity name",
        "description": "Task name",
        "createdDate": "Created on",
        "applicantFullName": "Applicant name",
        "applicant": "Requested for",
        "implementerIdentifier": "Applicant",
        "successComplete": "Task {{name}} successfully solved.",
        "completeTaskConfirmTitle": "Confirmation of task completion",
        "completeTaskConfirmDetail": "Do you really want this task to terminate?",
        "role": {
          "currentRoles": "Currently assigned permissions",
          "conceptIdentityRoles": "Applicant's roles"
        }
      },
      "DefaultTaskDetail": {
        "applicant": "Requested for",
        "implementerIdentifier": "Applicant",
        "createdDate": "Created date",
        "approvers": "Approvers of this task",
        "note": "$t(entity.ApprovalTask.note)",
        "taskState": "$t(entity.ApprovalTask.taskState)",
        "approve": "Accept",
        "disapprove": "Reject",
        "messages": {
          "approved":"Task successfully approved",
          "disapproved": "Task successfully rejected",
          "confirmTaskApproveTitle": "Task approve confirmation",
          "confirmTaskApprove": "Do you really want this task to approve?",
          "confirmTaskDisapprove": "Do you really want this task to reject?",
          "confirmTaskDisapproveTitle": "Task reject confirmation"
        }
      },
      "RoleApprovalTaskDetail": {
        "roleName" : "Role name"
      },
      "IdentityRoleConceptTable": {
        "oldValue": "Old value {{oldValue}}",
        "oldValueNotExist": "Old value was empty",
        "create": {
          "header": "Add roles"
        },
        "edit": {
          "header": "Edit roles"
        },
        "selectRoleCatalogue": {
          "header": "Selection roles from folders of catalog"
        },
        "action": {
          "deleteAdded": {
            "header": "Delete added roles",
            "message": "Do you really want to delete added roles?"
          },
          "deleteChanged": {
            "header": "Delete changed roles",
            "message": "Do you really want to delete changed roles?"
          },
          "deleteRemoved": {
            "header": "Delete removed roles",
            "message": "Do you really want to delete removed roles?"
          },
          "delete": {
            "header": "Delete roles",
            "message": "Do you really want to delete roles"
          }
        }
      }
    },
    "tasks": {
      "all": {
        "title": "All tasks",
        "label": "All tasks"
      },
      "identity": {
        "title": "My tasks",
        "label": "My tasks"
      }
    },
    "identities": {
      "header": "Users",
      "title": "Users",
      "filter": {
        "name": {
          "placeholder": "Username, personal number, surname, name, e-mail or note"
        },
        "organization": {
          "label": "Org. structure",
          "placeholder": "Element in organization structure"
        },
        "recursively": {
          "label": "Recursively",
          "placeholder": "Recursively by tree structure down",
          "yes": "Recursively by tree structure down",
          "no": "On selected tree node only"
        },
        "role": {
          "label": "Role",
          "placeholder": "Assigned role"
        },
        "disabled": {
          "label": "$t(label.disabled)",
          "placeholder": "$t(label.disabled)"
        },
        "identifiers": {
          "label": "Identifiers",
          "placeholder": "Identifiers - usernames or personal numbers. $t(content.identities.filter.identifiers.tooltip)",
          "tooltip": "Enter individual values separated by a comma."
        },
        "state": {
          "label": "State",
          "placeholder": "Identity state"
        }
      },
      "action": {
        "deactivate": {
          "action": "Deactivate manually",
          "header": "Deactivate user manually",
          "header_plural": "Deactivate users manually",
          "message": "Do you really want to deactivate the selected user <strong>{{username}}</strong> manually? Manually deactivated user can be activated manually only.",
          "message_plural": "Do you really want to deactivate <strong>{{count}}</strong> selected users manually? Manually deactivated users can be activated manually only.",
          "error": "When you deactivate a user {{username}} an error occurred",
          "success": "Selected users [{{usernames}}] are deactivated"
        },
        "activate": {
          "action": "Activate manually",
          "header_0": "N/A",
          "header": "Activate user manually",
          "header_plural": "Activate users manually",
          "message": "Do you really want to activate the selected user <strong>{{username}}</strong> manually? Only manually deactivated user can be activated.",
          "message_plural": "Do you really want to activate <strong>{{count}}</strong> selected users? Only manually deactivated users can be activated.",
          "error": "When you activate a user {{username}} an error occurred",
          "success": "Selected users [{{usernames}}] are activated"
        },
        "remove": {
          "action": "Remove"
        }
      }
    },
    "tree": {
      "header": "Tree structures",
      "title": "Tree structures",
      "filter": {
        "parentId": {
          "label": "Superior element"
        }
      },
      "typeNotFound": "Element not found.",
      "newType": "Please, continue creating a new element.",
      "typePick": "Select the element",
      "typePickPlaceHolder": "Select the element.",
      "nodes": {
        "header": "Structure elements",
        "title": "Structure elements",
        "addType": "Add element",
        "reloadTree": "Cancel the filter and reload the tree",
        "tab": {
          "identities": "Users",
          "nodes": "Structure elements"
        }
      },
      "node": {
        "detail": {
          "header": "Element details",
          "title": "Element details",
          "label": "Basic information",
          "edit": {
            "title": "Element details",
            "header": "{{name}} element details"
          },
          "create": {
            "title": "New element",
            "header": "New element"
          },
          "save": {
            "success": "Element [{{name}}] successfully saved"
          }
        },
        "eav": {
          "header": "More information",
          "title": "More information",
          "save": {
            "success": "Extended attributes for element [{{name}}] was successfully saved."
          },
          "error" : {
            "notFound": "Extended attributes definition for element not found."
          }
        },
        "roles": {
          "header": "Automatic roles",
          "title": "Automatic roles",
          "label": "Automatic roles",
          "edit": {
            "header": "{{name}} <small>automatic role detail</small>"
          },
          "create": {
            "header": "New automatic role"
          },
          "save": {
            "success": "Automatic role [{{record}}] successfully saved"
          }
        },
        "identities": {
          "header": "Users",
          "title": "Users",
          "label": "Users"
        }
      },
      "types": {
        "header": "Structure types",
        "title": "Structure types",
        "edit": "detail the type of structure",
        "create": "New type of tree structure",
        "save": {
          "success": "Type [{{name}}] successfully saved."
        },
        "configuration": {
          "button": {
            "rebuild": "Reindex"
          },
          "action": {
            "rebuild" : {
              "header": "Reindex",
              "message": "Do you really want to rebuild index for tree type structure [{{record}}]",
              "success": "Rebuild index for tree type structure [{{record}}] was scheduled."
            }
          },
          "index": {
            "valid": "Tree type structure index is valid.",
            "invalid": "Tree type structure index is invalid. Index rebuild is needed. Search on invalid index will not return relevant results.",
            "rebuild": "Index rebuild is in progress <small>Tree nodes editing is not possible for now</small>"
          }
        }
      }
    },
    "rolesMenu": {
      "header": "Roles",
      "title": "Roles"
    },
    "roleCatalogues": {
      "header": "Role catalog",
      "title": "Role catalog",
      "edit": {
        "title": "Folder details",
        "header": "{{name}} folder details"
      },
      "create": {
        "header": "New folder",
        "title": "New folder"
      },
      "save": {
        "success": "Folder [{{name}}] successfully saved to role catalog."
      },
      "parentPick": "Select folder",
      "reloadTree": "Reload tree catalog roles",
      "addRoleCatalogue": "Add now folder",
      "filter": {
        "name": "Name",
        "namePlaceHolder": "Folder name",
        "parent": "Folder parent",
        "parentPlaceHolder": "Folder parent",
        "niceName": "Name for users",
        "code": "Code",
        "text": "Code or name"
      },
      "tabs": {
        "basic": "Basic information"
      }
    },
    "automaticRoles": {
      "title": "Automatic roles",
      "header": "Automatic roles",
      "tree": {
        "header": "Automatic roles from organizational structure",
        "title": "By organizational structure"
      },
      "universalRequestNotSupported": {
        "title": "Automatic roles can not be managed within this request.",
        "text": "Automatic roles have their own agenda of requests, use them for their management.",
        "gotToRequests": {
          "label": "Automatic roles agenda"
        }
      },
      "emptyRules": "No rules found. The automatic role will not be assigned to any users.",
      "attribute": {
        "header": "Automatic roles based on the attribute",
        "title": "Based on the attribute",
        "create": {
          "header": "New automatic roles based on the attribute",
          "title": "New automatic roles based on the attribute"
        },
        "edit": {
          "header": "Edit automatic roles based on the attribute",
          "title": "Edit automatic roles based on the attribute"
        },
        "rules": {
          "header": "Rules",
          "title": "Rules"
        },
        "basic": {
          "header": "Basic informations",
          "title": "Basic informations"
        },
        "identities":{
          "header": "Users with assigned role",
          "title": "Users with role",
          "filter": {
            "text": "Name of user or value"
          }
        },
        "automaticRoleAttributeSaveFirst": "To add individual rules, you need to save the automatic role first.",
        "rule": {
          "create": {
            "header": "New rule",
            "title": "New rule"
          },
          "edit": {
            "header": "Rule edit",
            "title": "Rule edit"
          },
          "filter": {
            "text": "Name of attribute or value"
          }
        },
        "save": {
          "success": "Save new automatic role based on the attribute was successfully.",
          "recalculate": "Automatic role [{{name}}] will be recalculated. Assign role to identities run asynchronously. You can see progress in long running tasks agenda."
        },
        "filter": {
          "text": "Name of automatic role or role name"
        },
        "attributeCantBeUsed": {
          "text": "Attribute [{{name}}] can't be used for create new rule",
          "confidential": "$t(content.automaticRoles.attribute.attributeCantBeUsed.text), attribute is marked as confidential.",
          "persistentTypeText": "$t(content.automaticRoles.attribute.attributeCantBeUsed.text), attribute has persistent type TEXT."
        }
      },
      "recalculate": {
        "label": "Recalculation",
        "header": "Recalculate the automatic role based on attributes?",
        "message": "<b>Yes:</b> Role assignment to users will start now as a new long running task.<br /><b>No:</b> This configuration will be saved as a concept."
      },
      "button": {
        "change": {
          "label": "Change automatic role",
          "header": "Change this automatic role",
          "text": "Creates a request to change this automatic role. The request may require approval."
        }
      },
      "request":{
        "header": "Request for change the automatic role"
      }
    },
    "formDefinitions": {
      "header": "Form definitions",
      "title": "Form definitions",
      "edit": {
        "title": "Form definition detail"
      },
      "create": {
        "title": "New form definition",
        "header": "New form definition"
      },
      "filter": {
        "text": "Code or name"
      },
      "attributes": {
        "title": "Form Attributes"
      },
      "detail": {
        "title": "Basic information"
      },
      "save": {
        "success": "Form definition [{{name}}] successfully saved"
      },
      "localization": {
        "header": "Form localization",
        "title": "Form localization",
        "check": {
          "found": "Form localization exists. Localization found in localization file.",
          "not-found": "Form localization doesn't exist. Define her by the example bellow in module localization files.",
          "attributes-not-found": "Form definition attributes <strong class=\"highlight\">{{attributes}}</strong> are not localized. Add localization into module localization files."
        },
        "how-to": {
          "header": "How to",
          "message": "Form localization can be defined in module <strong class=\"highlight\">{{name}}</strong> (in the <strong>eav</strong> section):"
        }
      }
    },
    "formAttributes": {
      "header": "Form attributes",
      "title": "Form attributes",
      "edit": {
        "title": "Form attribute detail",
        "header": "{{name}} form attribute detail"
      },
      "create": {
        "title": "New attribute",
        "header": "New attribute"
      },
      "save": {
        "success": "Attribute [{{name}}] successfully saved"
      },
      "filter": {
        "code": "Code",
        "text": {
          "label": "Text",
          "placeholder": "Code / Name / Description"
        }
      },
      "detail": {
        "title": "Basic information"
      }
    },
    "form-values": {
      "header": "Attribute's values",
      "title": "Attribute's values",
      "filter": {
        "text": {
          "label": "Text",
          "placeholder": "Code / Name"
        },
        "type": {
          "placeholder": "Select attribute type"
        },
        "value": {
          "placeholder": "Attribute value"
        }
      }
    },
    "confidentialStorage": {
      "header": "Confidential storage",
      "title": "Confidential storage",
      "label": "Confidential storage",
      "filter": {
        "text": "Key / Owner type",
        "ownerId": "Owner Id",
        "key": "Key",
        "ownerType": "Owner type",
        "value": "Value"
      },
      "edit": {
        "title": "Detail of storage",
        "header": "Detail encrypted value"
      }
    },
    "scripts": {
      "header": "Script definitions",
      "title": "Script definitions",
      "edit": {
        "title": "Script detail",
        "header": "{{name}} script detail"
      },
      "scriptAuthoritySaveFirst": "You can add script authorities only after saving.",
      "create": {
        "title": "New script",
        "header": "New script"
      },
      "save": {
        "success": "Script [{{name}}] successfully saved."
      },
      "filter": {
        "text": "Code / Name / Description"
      },
      "detail": {
        "header" : "Basic informations",
        "title" : "Basic informations"
      },
      "authorities": {
          "header": "Script authorities",
          "title": "Script authorities",
          "edit": {
            "header": "Edit authority for script <small>{{name}}</small>"
          },
          "create": {
            "header": "Create new authority for script <small>{{name}}</small>"
          },
          "save": {
            "header": "Authority for script successfully saved",
            "success": "Authority for script successfully saved"
          }
      },
      "references": {
        "header" : "Script usage",
        "title" : "Script usage"
      }
    },
    "roles": {
      "menu-title": "Roles",
      "header": "Roles",
      "title": "Roles administration",
      "button": {
        "allRoles": "All roles",
        "createRequest": {
          "header": "Role changes are subject to approval.",
          "label": "Create request for changes",
          "text": "If do you want to make a changes, then create the request first."
        }
      },
      "edit": {
        "title": "Role details",
        "header": "{{name}} Role details"
      },
      "filter": {
        "text": {
          "placeholder": "Name or description"
        }
      },
      "roleCataloguePick": "Select folder",
      "create": {
        "header": "New role"
      },
      "save": {
        "success": "Role [{{name}}] successfully saved."
      },
      "select": {
        "chooseFolder": "Choose folder",
        "showRoleCatalogue": "Select from catalog"
      },
      "processRoleChange": {
        "roleName": "Role name",
        "roleValidFrom": "$t(entity.validFrom)",
        "roleValidTill": "$t(entity.validTill)",
        "currentActivity": "application status",
        "candicateUsers": "Can solve",
        "wfProcessId": "WF"
      },
      "processPermissionChange": {
        "currentActivity": "Status",
        "processInstanceName": "Request subject"
      },
      "setting": {
        "basic": {
          "header": "Default role settings"
        },
        "system": {
          "info": "System roles are used for application processes. For system roles its possible to change just settings independent on application logic."
        },
        "authority": {
          "header": "Granted permissions <small>(category)</small>",
          "select": {
            "none": "Remove all permissions in category",
            "all": "Add all permissions on category"
          },
          "group": {
            "hide": "Hide settings of basic permissions in category",
            "show": "Show settings of basic permissions in category"
          }
        },
        "approval": {
          "header": "Approval workflows"
        }
      },
      "tabs": {
        "basic": "Basic information"
      },
      "delete": {
        "identityAssigned": {
          "title": "Removing role is assign on users",
          "message": "Role [{{role}}] is assign to users. Before removing the role you need to take it from users."
        }
      },
      "action": {
        "createRequest": {
          "header": "Do you want to create a new role request?",
          "message": "Enter a new role name",
          "name": "Name of role"
        }
      }
    },
    "roleRequests": {
      "header": "Requests for roles",
      "title": "Requests for roles",
      "applicant": "Applicant",
      "create": {
        "header": "Create new request to change the permissions"
      },
      "button": {
        "createRequest": "Create request",
        "start": "Execute request"
      },
      "action": {
        "startRequest": {
          "header": "Do you really want execute this request",
          "message": "Do you really want execute this request and start approval process?",
          "started": "Request was started",
          "exception": "Error occurred during submitting request. Request was not submitted!",
          "duplicated": "Request was not submitted because it is duplicate with another request created on [{{created}}]."
        }
      },
      "filter": {
        "applicant":{
          "placeholder": "Search by whole username applicant."
        },
        "states":{
          "placeholder": "Search by states"
        },
        "dateCreatedFrom":{
          "placeholder": "Created from"
        },
        "dateCreatedTill":{
          "placeholder": "Created to"
        },
        "applicants":{
          "placeholder": "Search by applicants"
        }
      }
    },
    "roleRequestDetail": {
      "header": "Request to change permissions",
      "title": "Change permissions",
      "conceptHeader": "Requested change of permissions",
      "conceptWithCurrentRoleHeader": "Current assigned roles (includes requested changes)",
      "save": {
        "success": "Request to change permissions successfully saved",
        "start": "Execute request"
      },
      "button": {
        "createRequest":{
          "label": "Submit a request",
          "tooltip": "Start request for change permissions."
        }
      }
     },
     "automaticRoleRequests": {
       "header": "Requests for automatic roles",
       "title": "Requests for automatic roles",
       "role": "Request for role",
       "name": "Name",
       "create": {
         "header": "Create new request for automatic role"
       },
       "button": {
         "createRequest": "Create request",
         "start": "Execute request"
       },
       "action": {
         "startRequest": {
           "header": "Do you really want execute this request",
           "message": "Do you really want execute this request and start approval process?",
           "started": "Request was started",
           "exception": "Error occurred during submitting request. Request was not submitted!",
           "duplicated": "Request was not submitted because it is duplicate with another request created on [{{created}}]."
         }
       },
       "filter": {
         "role":{
           "placeholder": "Search by whole username applicant."
         },
         "states":{
           "placeholder": "Search by states"
         }
       }
     },
     "automaticRoleRequestDetail": {
       "header": "Request for automatic role",
       "title": "Change automatic role",
       "conceptHeader": "Requested change of rules",
       "conceptWithCurrentRulesHeader": "Approved rules (includes required changes)",
       "save": {
         "success": "Request to change automatic role successfully saved",
         "start": "Execute request"
       },
       "button": {
         "createRequest":{
           "label": "Submit a request",
           "tooltip": "Start request for change automatic role"
         }
       },
       "create": {
         "header": "Create the rule"
       },
       "edit": {
         "header": "Edit the rule"
       },
       "rulesIsAnd": {
         "title": "All rules must be met.",
         "text": "To assign a role, the entity must meet all the (below defined) rules at the same time."
       }

      },
     "requests": {
       "header": "Requests",
       "title": "Requests",
       "role": "Request",
       "name": "Name",
       "create": {
         "header": "Create new request"
       },
       "button": {
         "createRequest": "Create request",
         "start": "Execute request"
       },
       "action": {
         "startRequest": {
           "header": "Do you really want execute this request",
           "message": "Do you really want execute this request and start approval process?",
           "started": "Request was started",
           "exception": "Error occurred during submitting request. Request was not submitted!",
           "duplicated": "Request was not submitted because it is duplicate with another request created on [{{created}}]."
         }
       },
       "filter": {
         "states":{
           "placeholder": "Search by states"
         },
         "text":{
           "placeholder": "Search by target object code, type and description"
         }
       }
     },
     "requestInfo": {
       "title": "You are on the request preview",
       "text": "Any changes you make will only be written to this request.",
       "button": {
         "goToRequest": {
           "label": "Go to the request detail"
         },
         "showChanges": {
           "label": "Show changes",
           "tooltip": "Shows the changes made to this request in this detail."
         }
       }
     },
     "requestDetail": {
       "header": "Request",
       "title": "Request",
       "conceptHeader": "Requested changes",
       "save": {
         "success": "Request successfully saved",
         "start": "Execute request"
       },
       "button": {
         "createRequest":{
           "label": "Submit a request",
           "tooltip": "Start request"
         },
         "previewDetailByRequest":{
           "label": "Show preview",
           "tooltip": "Show preview with all requested changes."
         },
         "showItemChanges": {
           "tooltip": "Show changed attributes for this object."
         }
       },
       "create": {
         "header": "Create the request change"
       },
       "edit": {
         "header": "Edit the request change"
       },
       "itemDetail": {
         "header": "Requested changes",
         "title": {
           "add": "Request for create new object",
           "remove": "Request for delete that object",
           "update": "Request for change that object"
         },
         "nochanges": {
           "title": "No changes found.",
           "text": "No requested changes was found for this object."
         },
         "changes": {
           "property": "Attribute name",
           "oldValue": "Current value",
           "newValue": "New value"
        }
       }
      },
    "role": {
      "identities": {
        "header": "Users with assigned role",
        "title": "Users with role"
      },
      "guarantees": {
        "header": "$t(entity.Role.guarantees)",
        "title": "$t(entity.Role.guarantees)",
        "create": {
          "header": "Create role authorizer"
        },
        "edit": {
          "header": "{{name}} <small>role authorizer detail</small>"
        },
        "role": {
          "header": "$t(entity.RoleGuaranteeRole._type)",
          "title": "$t(entity.RoleGuaranteeRole._type)"
        },
        "identity": {
          "header": "$t(entity.RoleGuarantee._type)",
          "title": "$t(entity.RoleGuarantee._type)"
        },
        "save": {
          "success": "Authorizer [{{record}}] successfully saved."
        }
      },
      "eav": {
        "header": "More information",
        "title": "More information",
        "save": {
          "success": "Extended attributes for role [{{name}}] successfully saved.",
          "start": "Execute request"
        },
        "error" : {
          "notFound": "Extended attributes definition for role not found."
        }
      },
      "tree-nodes": {
        "header": "Automatic roles",
        "title": "Automatic roles",
        "label": "Automatic roles",
        "filter": {
          "text": {
            "placeholder": "Name of automatic role or role name"
          },
          "treeNodeId": {
            "placeholder": "Tree node"
          }
        },
        "edit": {
          "header": "{{name}} <small>automatic role detail</small>"
        },
        "create": {
          "header": "New automatic role"
        },
        "save": {
          "success": "Automatic role [{{record}}] successfully saved. Assign role to identities run asynchronously. You can see progress in long running tasks agenda."
        },
        "action": {
          "delete": {
            "action": "Remove",
            "header": "Remove automatic role",
            "header_plural": "Remove automatic roles",
            "message": "Do you want to remove selected roles [<strong>{{record}}</strong>]? All assigned roles dependent on removed automatic role will be removed too.",
            "message_plural": "Select records: [<strong>{{records}}</strong>].<br /><br />Do you want to remove <strong>{{count}}</strong> selected records? All assigned roles dependent on removed automatic role will be removed too.",
            "error": "An error occurred while removing [{{record}}].",
            "success": "Selected record [{{record}}] successfully deleted",
            "success_plural": "Selected records [{{records}}] successfully deleted"
          }
        }
      },
      "authorization-policies": {
        "header": "Permissions",
        "title": "Permissions",
        "label": "Permissions",
        "edit": {
          "header": "{{name}} <small>permission detail</small>"
        },
        "create": {
          "header": "New permission"
        },
        "save": {
          "success": "Permission [{{record}}] successfully saved"
        },
        "evaluator": {
          "default": "Default evaluator will be used. Agenda doesn't support other evaluator types."
        }
      },
      "catalogues": {
        "header": "Role catalogue",
        "title": "Role catalogue",
        "create": {
          "header": "Assign role to catalogue"
        },
        "edit": {
          "header": "{{name}} <small>role asigned to catalogue</small>"
        },
        "save": {
          "success": "Role was assigned to catalogue [{{record}}]."
        }
      },
      "compositions": {
        "header": "Business role",
        "title": "Business role",
        "create": {
          "header": "New"
        },
        "edit": {
          "header": "{{name}} <small>detail</small>"
        },
        "superior": {
          "header": "Superior roles"
        },
        "sub": {
          "header": "Sub roles"
        },
        "save": {
          "success": "Business role [{{record}}] successfully saved. Role will be assigned to the users on the background asynchronously."
        },
        "action": {
          "delete": {
            "success": "Business role [{{record}}] successfully removed. Assigned role will be removed from the users on the background asynchronously."
          }
        }
      }
    },
    "identity": {
      "sidebar": {
        "profile": "Personal data",
        "password": "Change password",
        "roles": "Roles",
        "approve": "Approver of roles",
        "subordinates": "Subordinates",
        "positions": "Contracted positions"
      },
      "profile": {
        "header": "Personal data",
        "title": "My profile",
        "userDetail": "User details",
        "username": "$t(entity.Identity.username)",
        "externalCode": "$t(entity.Identity.externalCode)",
        "lastName": "$t(entity.Identity.lastName)",
        "firstName": "$t(entity.Identity.firstName)",
        "fileRejected": "$t(entity.Identity.fileRejected)",
        "fileUploaded": "$t(entity.Identity.fileUploaded)",
        "deleteImage": {
          "title": "Delete profile image",
          "message": "Do you really want to delete profile image?"
        },
        "email": {
          "label": "$t(entity.Identity.email)",
          "placeholder": "Users e-mail"
        },
        "phone": {
          "label": "$t(entity.Identity.phone)",
          "placeholder": "Phone number"
        },
        "description": {
          "label": "$t(entity.Identity.description)",
          "placeholder": "Notes to user"
        },
        "active": "Active",
        "blockLoginDate": "Identity has a blocked login to the application due to exceeding unsuccessful login attempts. Login will be possible after {{date}}.",
        "button": {

        },
        "validation": {
          "passwordsNotMatch": "Passwords do not match.",
          "newIdmManagerIsTheSame": {
            "title": "User {{username}} is identical with inactive user",
            "message": "Please select another user, who will be set as new manager"
          },
          "newIdmManagerIsRequired": {
            "title": "Please select user",
            "message": "Please select user, which will be new authorizer"
          }
        },
        "messages": {
          "deactiveDisabled": "You cannot inactivate yourself.",
          "subordinatesCount": "User <strong>{{username}}</strong>, which is to be deactivate is manager of <strong>{{subordinatesCount}}</strong> users. <br/> Please, select a new manager for displayed users.",
          "saved": "User {{username}} successfully saved",
          "deactivated": "User {{username}} user successfully deactivated.",
          "deactivateBreak": {
            "title": "Setting of new manager was interrupted",
            "message": "New manager was successfully set for {{deactivateCounter}} users. Than the operation was interrupted. The operation can continue."
          },
          "switchedIdmManager": {
            "title": "Setting new manager",
            "message": "Setting a new manager {{newIdmManager}} instead of previous {{previousIdmManager}} was successful."
          },
          "switchIdmManagerFailed": {
            "title": "Error during saving user {{identity.username}} (continues processing)"
          }
        },
        "deactivate": {
          "proceed": "Processing setting new manager...",
          "selectIdmManager": "Select new manager",
          "confirm": {
            "header": "Confirm deactivation of user",
            "message": "User <strong>{{username}}</strong> doesn't have any subordinates. Do you really want to deactivate user <strong>{{username}}</strong>?"
          },
          "form": {
            "newIdmManager": "Please, select new manager"
          },
          "button": {
            "break": {
              "title": "Aborting processing - Processed users remain adjust",
              "label": "Abort operation",
              "proceed": "Aborting operation ..."
            }
          }
        },
        "organizationPosition": {
          "title": "Position in organizational structure"
        }
      },
      "roles": {
        "header": "$t(navigation.menu.roles.label)",
        "title": "$t(navigation.menu.roles.label)",
        "changePermissions": "Manage authorizations",
        "authorities": "Granted authorizations <small>from assigned roles</small>",
        "changeRoleProcesses": {
          "header": "Roles pending approval",
          "deleteConfirm": "Do you really want to delete selected request?",
          "deleteSuccess": "Request successfully deleted."
        },
        "changePermissionRequests": {
          "label": "Requests",
          "header": "Requests for authorization change"
        },
        "conceptPermissionRequests": {
          "header": "Concepts of requests for authorization change"
        },
        "create": {
          "header": "Assign new role",
          "success": "Role [{{role}}] successfully assigned to user [{{username}}].",
          "accepted": "Role [{{role}}] for user [{{username}}] was successfully submitted to approval. Assignment must be approve first."
        },
        "edit": {
          "header": "{{role}} <small>assignment details</small>",
          "success": "Role [{{role}}] of user [{{username}}] successfully edited."
        },
        "delete": {
          "success": "Role [{{role}}] of user [{{username}}] successfully removed."
        },
        "detail": {
          "directRole": {
            "subRoles": {
              "header": "Roles assigned by direct role"
            }
          }
        },
        "contracts": {
          "empty": {
            "message": "User doesn't have any valid contracted positions, on which you can assign roles. Please, add valid contracted position.",
            "button": "Add contracted position"
          }
        },
        "directRoles": {
          "header": "Directly assigned roles"
        },
        "subRoles": {
          "header": "Roles assigned by direct roles"
        }
      },
      "authorities": {
        "label": "Permissions",
        "header": "Granted permissions <small>by assigned roles</small>",
        "title": "Granted permissions",
        "help": {
          "header": "Granted permissions",
          "body": {
            "title": "Base permissions are divided into categories. After associating the active role, the user will get assigned permissions (according to the assignment validity). Persmissions are evaluated in different parts of the application.",
            "checkbox": {
              "title": "The checkbox for the category name shows whether some of the basic permissions in that category are assigned:",
              "none": "No permissions are assigned to the category,",
              "some": "some of the permissions in the given category are assigned - you can expand the category to view specific assignments,",
              "all": "all permissions in that category are assigned."
            }
          }
        }
      },
      "passwordChange": {
        "header": "Password",
        "title": "Password",
        "password": {
          "old": "Current password",
          "new": "New password",
          "newAgain": "Re-enter new password",
          "strength": "Password strength:"
        },
        "permission": {
          "failed": "You do not have permissions to change password."
        },
        "changeType": {
          "DISABLED": "Password change is not allowed in this environment.",
          "CUSTOM": "Password change can be done separately on each account.",
          "ALL_ONLY": "Password can be change only  for all accounts at once."
        },
        "accounts": {
          "label": "On systems",
          "placeholder": "Select end system on which you want to change password"
        },
        "message": {
          "wrongUser": "Change password to subordinates is not allowed",
          "success": "Password on accounts [{{accounts}}] for users [{{username}}] successfully changed.",
          "failed": "Password was not changed, password provisioning on accounts [{{accounts}}] for users [{{username}}] failed.",
          "notChanged": "Password was not changed. $t(content.identity.passwordChange.message.noAccounts)",
          "isAdmin": "You are logged in as administrator. Original password is not required for password change. Password can be changed on selected systems. Number of changes is not limited.",
          "noContent": "You do not have permissions to change password.",
          "noAccounts": "There are no accounts where you can change password."
        },
        "button": {
          "change": "Change password"
        },
        "identity": {
          "username": "$t(entity.Identity.username)"
        }
      },
      "identityRoleDetail": {
        "label": "Record details"
      },
      "identityContracts": {
        "header": "Contracted positions",
        "title": "$t(content.identity.identityContracts.header)",
        "identityContracts": {
          "empty": "Contracted positions not found."
        },
        "delete": {
          "success": "Contracted position [{{position}}] for user [{{username}}] successfully removed."
        }
      },
      "contractSlices": {
        "header": "Contracted positions (time slices)",
        "title": "$t(content.identity.contractSlices.header)",
        "contractSlices": {
          "empty": "Contracted positions (time slices) not found."
        },
        "delete": {
          "success": "Contracted position [{{position}}] (time slice) for user [{{username}}] successfully removed."
        }
      },
      "approve": {
        "header": "Role approver",
        "title": "$t(content.identity.approve.header)"
      },
      "create": {
        "header": "Creating a new user",
        "title": "New user",
        "button": {
          "generate": "Generate password",
          "add": "Create user"
        },
        "message": {
          "success": "User [{{username}}] successfully created."
        }
      },
      "delegates": {
        "header": "Delegate tasks",
        "title": "$t(content.identity.delegates.header)",
        "empty": "No set delegations found.",
        "message": {
          "save": {
            "success": "Delegation to user [{{delegate}}] was successful."
          },
          "delete": {
            "confirm": {
              "title": "Remove delegation",
              "message": "Do you really want to remove delegation on user <strong>{{delegate}}</strong>?"
            },
            "success": "Delegation on user [{{delegate}}] successfully removed."
          }
        },
        "button": {
          "add": "Add delegation",
          "delete": "Remove delegation from user {{delegate}}"
        },
        "create": {
          "header": "New delegation",
          "button": {
            "save": "Save delegation",
            "saving": "Saving delegation ..."
          }
        },
        "delete": {
          "header": "Processing removing delegation"
        }
      },
      "subordinates": {
        "header": "Subordinates",
        "title": "$t(content.identity.subordinates.header)"
      },
      "eav": {
        "header": "More information",
        "title": "More information",
        "save": {
          "success": "Extended attributes for identity [{{name}}] successfully saved."
        },
        "error" : {
          "notFound": "Extended attributes definition for identity not found."
        }
      },
      "garanted-roles": {
        "header": "Authorizer <small>User is authorizer of these roles</small>",
        "title": "Authorize roles"
      }
    },
    "identity-contract": {
      "detail": {
        "header": "Contracted position detail",
        "title": "Contracted position detail",
        "label": "Basic information",
        "invalidContract":"Invalid contracted position detail",
        "validContract":"Contracted position detail",
        "edit": {
          "title": "Contracted position detail",
          "header": "{{position}} <small>contracted position detail</small>",
          "success": "Contracted position [{{position}}] successfully saved."
        },
        "create": {
          "title": "New contracted position",
          "header": "New contracted position",
          "success": "Contracted position [{{position}}] successfully saved.",
          "accepted": "Contracted position [{{position}}] was accepted. Contracted position has to be approved at first."
        },
        "save": {
          "success": "Contracted position [{{name}}] successfully saved."
        },
        "alert": {
          "controlledBySlices": "This contract is controlled by time slices. Cannot be modified directly!"
        }
      },
      "eav": {
        "header": "More information",
        "title": "More information",
        "label": "More information",
        "save": {
          "success": "Extended attributes for contracted position [{{name}}] successfully saved."
        },
        "error" : {
          "notFound": "Extended attributes definition for contracted position not found."
        }
      },
      "guarantees": {
        "header": "Guarantees and managers",
        "title": "Guarantees",
        "label": "Guarantees",
        "guarantees": {
          "direct": "Direct guarantees <small>on this contracted position</small>",
          "byTree": "Managers <small>by tree structures</small>"
        },
        "edit": {
          "title": "Guarantee detail",
          "header": "Guarantee detail"
        },
        "create": {
          "title": "Add guarantee",
          "header": "Add guarantee"
        },
        "action": {
          "save": {
            "success_0": "N/A",
            "success_1": "For contracted position was successfully saved authorizer [{{record}}]"
          }
        }
      },
      "positions": {
        "header": "Other positions",
        "title": "Other positions",
        "label": "Other positions",
        "edit": {
          "title": "Position detail",
          "header": "Position detail"
        },
        "create": {
          "title": "Add position",
          "header": "Add position"
        }
      }
    },
    "contract-slice": {
      "detail": {
        "header": "Time slice of contracted position detail",
        "title": "Time slice of contracted position detail",
        "label": "Basic information",
        "labelContract": "Basic information of contract",
        "labelSlice": "Basic information of time slice",
        "invalidContract":"Invalid time slice of contracted position detail",
        "validContract":"Time slice of contracted position detail",
        "edit": {
          "title": "Time slice of contracted position detail",
          "header": "{{position}} <small>time slice of contracted position detail</small>",
          "success": "Time slice of contracted position [{{position}}] successfully saved.",
          "notEditable": "Time slices cannot be editing or adding manually."
        },
        "create": {
          "title": "New time slice of contracted position",
          "header": "New time slice of contracted position",
          "success": "Time slice of contracted position [{{position}}] successfully saved.",
          "accepted": "Time slice of contracted position [{{position}}] was accepted. Time slice of contracted position has to be approved at first."
        },
        "save": {
          "success": "Time slice of contracted position [{{name}}] successfully saved."
        }
      },
      "eav": {
        "header": "More information",
        "title": "More information",
        "label": "More information",
        "save": {
          "success": "Extended attributes for time slice of contracted position [{{name}}] successfully saved."
        },
        "error" : {
          "notFound": "Extended attributes definition for time slice of contracted position not found."
        }
      },
      "guarantees": {
        "header": "Guarantees and managers",
        "title": "Guarantees",
        "label": "Guarantees",
        "guarantees": {
          "direct": "Direct guarantees <small>on this time slice</small>",
          "byTree": "Managers <small>by tree structures</small>"
        },
        "edit": {
          "title": "Guarantee detail",
          "header": "Guarantee detail"
        },
        "create": {
          "title": "Add guarantee",
          "header": "Add guarantee"
        },
        "action": {
          "save": {
            "success_0": "N/A",
            "success_1": "For time slice was successfully saved authorizer [{{record}}]"
          }
        }
      }
    },
    "organizations": {
      "header": "Organizational structure",
      "title": "Organizational structure",
      "label": "Organization",
      "defaultTreeType": {
        "empty": {
          "message": "Default tree type is not configured.",
          "button": "Define default type"
        }
      }
    },
    "system": {
      "modules": {
        "header": "Application modules and components",
        "title": "Modules"
      },
      "fe-modules": {
        "header": "Application modules and components",
        "title": "Modules (frontend)",
        "components": {
          "header": "Components",
          "priority": "Priority",
          "type": "Type",
          "order": "Order",
          "overriden": "Component overridden in module: {{moduleId}}"
        },
        "activate": {
          "disabled": "Frontend module depends on backend module [{{backendId}}]. Activate backend module at first."
        }
      },
      "be-modules": {
        "header": "Modules <small>backend</small>",
        "title": "Modules (backend)",
        "result-codes": {
          "button-show": "Result codes",
          "title": "List of result codes [{{moduleName}}]",
          "status": "Status",
          "code": "Code",
          "message": "Message",
          "filter": {
            "text": {
              "placeholder": "Code"
            }
          }
        }
      },
      "entity-event-processors": {
        "header": "Processors",
        "title": "Processors",
        "filter": {
          "text": {
            "placeholder": "Name, description or content type (entity type)"
          },
          "entityType": {
            "placeholder": "Select entity type"
          },
          "eventTypes": {
            "placeholder": "Select event type (processor has to support all of them)"
          }
        }
      }
    },
    "scheduler": {
      "header": "Scheduler",
      "title": "Task scheduler",
      "running-tasks": {
        "header": "Running tasks",
        "title": "Running tasks",
        "empty": "No running tasks found",
        "button": {
          "cancel": "End task",
          "interrupt": "Interrupt task"
        },
        "refresh": "Refresh running tasks",
        "action": {
          "task-cancel": {
            "header": "Cancel running task",
            "message": "Do you really was to cancel task [<strong>{{record}}</strong>]?",
            "success": "Task [{{record}}] will be canceled as soon is possible (after current item is processed)."
          },
          "task-interrupt": {
            "header": "Interrupt running task",
            "message": "Do you really was to interrupt task [<strong>{{record}}</strong>]?",
            "success": "Task [{{record}}] was interrupted."
          }
        }
      },
      "schedule-tasks": {
        "header": "Scheduled tasks",
        "title": "Scheduled tasks",
        "button": {
          "run": "Run manually",
          "dryRun": "Run as dryRun (demo process)"
        },
        "action": {
          "trigger-delete": {
            "header": "Remove scheduled run",
            "message": "Do you really want to remove scheduled run?",
            "success": "Scheduled run was removed."
          },
          "trigger-create": {
            "header": "New scheduled run",
            "success": "Scheduled run successfully added."
          },
          "task-create": {
            "header": "Create task",
            "success": "Task [{{record}}] successfully created."
          },
          "task-edit": {
            "header": "Task details",
            "success": "Task [{{record}}] successfully updated.",
            "parameters": "Task parameters"
          },
          "task-run": {
            "header": "Run record manually",
            "header_plural": "Run records manually",
            "message": "Do you want to run selected record [<strong>{{record}}</strong>] manually?",
            "message_plural": "Selected records: [<strong>{{records}}</strong>].<br /><br /> Do you want to run <strong>{{count}}</strong> selected records manually?",
            "error": "An error occurred while running [{{record}}] manually.",
            "success": "Selected record [{{record}}] successfully ran manually",
            "success_plural": "Selected records [{{records}}] were successfully run"
          },
          "task-dry-run": {
            "header": "Run record as dryRun (demo process)",
            "header_plural": "Run records as dryRun (demo process)",
            "message": "Do you want to run selected record [<strong>{{record}}</strong>] as dryRun (demo process)?",
            "message_plural": "Selected records: [<strong>{{records}}</strong>].<br /><br /> Do you want to run <strong>{{count}}</strong> selected records as dryRun (demo process)?",
            "error": "An error occurred while running [{{record}}] as dryRun (demo process).",
            "success": "Selected record [{{record}}] successfully ran as dryRun (demo process)",
            "success_plural": "Selected records [{{records}}] were successfully run as dryRun (demo process)"
          },
          "task-delete": {
            "header": "Remove task",
            "message": "Do you really want to remove tasks [<strong>{{record}}</strong>]?",
            "success": "Task [{{record}}] successfully removed."
          },
          "save": {
            "success": "Task [{{record}}] successfully saved ."
          }
        }
      },
      "all-tasks": {
        "header": "All tasks",
        "title": "All tasks",
        "filter": {
          "text": {
            "label": "Type / Description",
            "placeholder": "Type or description of task"
          },
          "operationState": {
            "label": "State",
            "placeholder": "Task state"
          }
        },
        "detail": {
          "header": "Task details",
          "result": "Result",
          "resultCode": "Code",
          "scheduledTask": {
            "empty": "Selected long running task was executed without scheduler, queue is not available."
          }
        },
        "action": {
          "processCreated": {
            "button": "Run all created tasks",
            "success": "Created task will be executed.",
            "selectedButton": "Run selected tasks"
          }
        },
        "tabs": {
          "basic": "Basic information",
          "items": "Processed items",
          "queue": "Queue"
        }
      }
    },
    "notifications": {
      "header": "Notifications history",
      "label": "Notifications history",
      "title": "Records of sent notifications",
      "filter": {
        "dateFrom": {
          "label": "From",
          "placeholder": "Date from"
        },
        "dateTill": {
          "label": "To",
          "placeholder": "Date to"
        },
        "text": {
          "label": "Message",
          "placeholder": "Subject, content"
        },
        "sender": {
          "label": "Sender",
          "placeholder": "Sender ..."
        },
        "recipient": {
          "label": "Recipient",
          "placeholder": "Recipient ..."
        },
        "sent": {
          "label": "Sent",
          "placeholder": "Sending status ..."
        }
      }
    },
    "notification": {
      "headerNew": "Notification",
      "header": "Notification details",
      "title": "Notification details",
      "titleNew": "Notification",
      "relatedNotifications": "Records from sender",
      "label": {
        "notSent": "Not sent",
        "sentPartly": "Partially sent"
      },
      "sent": {
        "success": "Notifications were successfully sent"
      }
    },
    "notificationTemplate": {
      "headerNew": "New template",
      "header": "Template",
      "title": "Templates ",
      "titleNew": "New template",
      "save": {
        "success": "Template [{{name}}] was successfully saved."
      },
      "filter": {
        "text": "Name / Subject / Code"
      }
    },
    "emails": {
      "header": "E-mails history",
      "title": "E-mails history"
    },
    "email": {
      "header": "E-mail details",
      "title": "E-mail details",
      "relatedNotifications": "Records from sender",
      "label": {
        "notSent": "Not sent",
        "sentPartly": "Partially sent"
      }
    },
    "websockets": {
      "header": "Websocket history",
      "title": "Websocket history"
    },
    "sms": {
      "header": "SMS history",
      "title": "SMS history"
    },
    "websocket": {
      "header": "Websocket message details",
      "title": "Websocket message details"
    },
    "notificationConfigurations": {
      "label": "Configuration",
      "header": "Notifications configuration",
      "title": "Notifications configuration",
      "edit": {
        "header": "{{name}} <small>item configuration details</small>"
      },
      "create": {
        "header": "New configuration item"
      },
      "save": {
        "success": "Configuration item [{{name}}] was successfully saved"
      }
    },
    "workflow" : {
      "definition": {
        "title": "Workflow definition details",
        "header": "Workflow definition details",
        "name": "Name",
        "key": "Key",
        "version": "Version",
        "description": "Description",
        "resourceName": "Resource name",
        "category": "Category",
        "diagramResourceName": "Scheme name",
        "deploymentId": "Deployment Id",
        "id":"Identificator",
        "diagram": "Process preview",
        "fullscreenDiagram": "Process preview"
      },
      "definitions": {
        "title": "Workflow definitions management",
        "header": "Workflow definitions management",
        "name": "$t(content.workflow.definition.name)",
        "key": "$t(content.workflow.definition.key)",
        "version": "$t(content.workflow.definition.version)",
        "description": "$t(content.workflow.definition.description)",
        "resourceName": "$t(content.workflow.definition.resourceName)",
        "fileRejected": "Workflow definition file must be of type bpmn20.xml ({{name}})!",
        "filesRejected": "Workflow definition types must be of type bpmn20.xml!",
        "fileUploaded": "Workflow definition ({{name}}) was successfully uploaded.",
        "id":"$t(content.workflow.definition.id)"
      },
      "history":{
        "processes":{
          "title": "History of worfklow processes",
          "header": "History of worfklow processes <small>approving, tasks</small>"
        },
        "process":{
          "title": "History of process",
          "header": "History of process",
          "diagram": "Process diagram",
          "fullscreenDiagram": "Process diagram",
          "startTime": "$t(entity.WorkflowHistoricProcessInstance.startTime)",
          "endTime": "$t(entity.WorkflowHistoricProcessInstance.endTime)",
          "deleteReason": "$t(entity.WorkflowHistoricProcessInstance.deleteReason)",
          "processVariables": "$t(entity.WorkflowHistoricProcessInstance.processVariables)",
          "name": "$t(entity.WorkflowHistoricProcessInstance.name)",
          "startActivityId": "$t(entity.WorkflowHistoricProcessInstance.startActivityId)",
          "superProcessInstanceId": "$t(entity.WorkflowHistoricProcessInstance.superProcessInstanceId)",
          "processDefinitionKey": "$t(entity.WorkflowHistoricProcessInstance.processDefinitionKey)",
          "id": "$t(entity.WorkflowHistoricProcessInstance.id)",
          "applicant": "$t(entity.WorkflowHistoricProcessInstance.applicant)",
          "tasks": "User tasks in  process",
          "subprocesses": "Sub-processes",
          "filter": {
            "processDefinition":{
              "label": "Definition",
              "placeholder": "Workflow definition"
            }
          }
        },
        "task":{
          "title": "User tasks in process",
          "header": "User tasks in process",
          "startTime": "$t(entity.WorkflowHistoricTaskInstance.startTime)",
          "endTime": "$t(entity.WorkflowHistoricTaskInstance.endTime)",
          "deleteReason": "$t(entity.WorkflowHistoricTaskInstance.deleteReason)",
          "name": "$t(entity.WorkflowHistoricTaskInstance.name)",
          "priority": "$t(entity.WorkflowHistoricTaskInstance.priority)",
          "createTime": "$t(entity.WorkflowHistoricTaskInstance.createTime)",
          "id": "$t(entity.WorkflowHistoricTaskInstance.id)",
          "assignee": "$t(entity.WorkflowHistoricTaskInstance.assignee)",
          "completeTaskDecision": "$t(entity.WorkflowHistoricTaskInstance.completeTaskDecision)"
        }
      }
    },
    "audit": {
      "header": "Audit",
      "title": "Audit",
      "title-entities": "Entities",
      "title-identities": "Users",
      "modifier": "Action executor",
      "date": "Date of change",
      "empty": "Without records",
      "pickRevision": "Select revision",
      "detail": "Revision details",
      "id": "Id",
      "noPreviousRevision": "No previous revision",
      "profile": {
        "userDetail": "{{revision}}. revision, {{name}}, {{date}}"
      },
      "logging-event": {
        "title": "Logging events",
        "label": "Logging events",
        "header": "Logging events",
        "header-detail": "Logging event",
        "detail": "detail",
        "exceptions": "Error message",
        "rawSource": "Show copyable content"
      },
      "revision": {
        "id": "Revision Id",
        "modifier": "Modified by",
        "type": "Entity type",
        "modification": "Modification type",
        "revisionDate": "Date of revision",
        "deleted": "Entity was deleted",
        "created": "Entity was created",
        "entityId": "Entity Id",
        "modificationType": {
          "ADD": "Added",
          "MOD": "Modified",
          "DEL": "Deleted"
        }
      },
      "filter": {
        "dateFrom": {
          "label": "from",
          "placeholder": "Date from"
        },
        "dateTill": {
          "label": "Till",
          "placeholder": "Date till"
        }
      },
      "identities": {
        "username": "Login",
        "modifier": "Modifier",
        "identityId": "Identity Id"
      }
    },
    "entityEvents": {
      "header": "Entity events",
      "title": "Entity events",
      "label": "$t(content.entityEvents.title)",
      "filter": {
        "text": {
          "placeholder": "$t(entity.EntityEvent.ownerType.label) / $t(entity.EntityEvent.ownerId.label) (like)"
        },
        "ownerType": {
          "placeholder": "$t(entity.EntityEvent.ownerType.label)"
        },
        "ownerId": {
          "placeholder": "$t(entity.EntityEvent.ownerId.label) (uuid)"
        }
      },
      "event": {
        "header": "Entity events",
        "detail": {
          "header": "Event detail"
        }
      },
      "state": {
        "header": "Entity states",
        "detail": {
          "header": "State detail"
        }
      },
      "action": {
        "deleteAll": {
          "button": {
            "label": "Delete all entity events",
            "title": "Delete all entity events"
          },
          "header": "Delete entity events",
          "message": "Do you want to delete all persisted entity events and their states? <strong>All entity events in all states will be deleted!</strong>",
          "success": "Entity events successfully deleted."
        }
      }
    },
    "generateValues": {
      "header": "Generate values",
      "title": "Generate values",
      "create": {
        "header": "Create new generator"
      },
      "edit": {
        "header": "Edit generator"
      },
      "noGenerators": "The selected entity type doesn't contain any generators",
      "noProperties": "The selected generator doesn't have any settings.",
      "selectGenerator": "For display the settings, you must first select the generator.",
      "generatorProperties": {
        "title": "Generator settings"
      },
      "filter": {
        "dtoType": "Entity type"
      }
    }
  },
  "entity": {
    "id": {
      "label": "Id",
      "title": "Identifier",
      "help": "Internal identifier"
    },
    "name": "Name",
    "created": "Created",
    "modified": {
      "label": "Last changed"
    },
    "creator": "Creator",
    "validFrom": "Valid from",
    "validTill": "Valid till",

    "Identity": {
      "_type": "User",
      "username": "Login",
      "externalCode": "Personal number",
      "firstName": "First name",
      "lastName": "Surname",
      "email": "E-mail",
      "phone": "Phone",
      "description": "Note",
      "password": "Password",
      "passwordAgain": "Re-enter password",
      "homeOrganisation": "Home organization",
      "disabled": "$t(label.disabled)",
      "internist": "Employee",
      "externe": "External contractor",
      "titleBefore": "Titles before",
      "titleAfter": "Titles after",
      "fileRejected": "Profile picture file ({{name}}) must be of image type - jpg, png, gif.",
      "fileUploaded": "Profile picture ({{name}}) was successfully uploaded.",
      "state": {
        "label": "State",
        "help": "Identity state. It's controlled by contracted positions or can be manually deactivated from the table actions.",
        "title": "$t(entity.Identity.state.help)"
      },
      "disabledReadonly": {
        "label": "$t(label.disabled)",
        "help": "$t(label.disabled) identity cannot log in. It's controlled by the state."
      }
    },
    "RoleCatalogue": {
      "_type": "Catalog folder",
      "code": {
        "name": "Code",
        "help": "Folder code is unique in catalog."
      },
      "name": {
        "name": "Folder name",
        "help": "Descriptive attribute for users. Unique in catalog level."
      },
      "url": "URL",
      "urlTitle": "URL title",
      "description": "description",
      "parent": {
        "name": "Parent folder in catalog"
      }
    },
    "RoleCatalogueRole": {
      "_type": "Role assigned into catalogue",
      "roleCatalogue": {
        "label": "$t(entity.RoleCatalogue._type)",
        "help": "Role will be in selected catalogue folder."
      }
    },
    "RoleComposition": {
      "_type": "Role composition",
      "superior": {
        "label": "Superior role",
        "help": ""
      },
      "sub": {
        "label": "Sub role",
        "help": ""
      }
    },
    "RoleGuarantee": {
      "_type": "Role authorizer - defined by identity",
      "role": {
        "label": "Role"
      },
      "guarantee": {
        "label": "Authorizer - identity",
        "help": "Selected identity will be the role authorizer."
      }
    },
    "RoleGuaranteeRole": {
      "_type": "Role authorizer - defined by role",
      "role": {
        "label": "Role"
      },
      "guaranteeRole": {
        "label": "Authorizer - role",
        "help": "Identities with the selected role assigned will be the role authorizers."
      }
    },
    "ConfidentialStorageValue": {
      "ownerId": "Owner Id",
      "key": "Key",
      "ownerType": "Owner type",
      "serializableValue": "Value",
      "created": "$t(entity.created)",
      "creator": "$t(entity.creator)"
    },
    "Script": {
      "name": "Script name",
      "category": "Category",
      "code": "Code",
      "script": {
        "help": "Body of script in groovy.",
        "label": "Script"
      },
      "select": {
        "help": "",
        "button": "Insert script",
        "label": "Selection of available scripts"
      },
      "description": "Script description"
    },
    "ScriptAuthority": {
      "type": {
        "label": "Authority type",
        "help": ""
      },
      "name": "Name",
      "className": "Class name",
      "service": "Service name"
    },
    "FormDefinition" : {
      "type": "Type",
      "code": "Code",
      "name": "Name",
      "unmodifiable": {
        "label": "System definition",
        "help": "System definition can't be deleted and can't be edited some of her attributes."
      },
      "main": {
        "label": "Main definition",
        "help": "Main / default definition"
      },
      "description": "Description"
    },
    "FormAttribute" : {
      "code": {
        "label": "Code",
        "help": "Attribute key."
      },
      "name": {
        "label": "Name",
        "help": "Will be shown on form detail."
      },
      "seq": {
        "label": "Order",
        "help": "Attribute order on form detail."
      },
      "persistentType": "Attribute type",
      "faceType": {
        "label": "Face type",
        "placeholder": "Select face type or leave it default ...",
        "help": "Choose attribute renderer. Default renderer is chosen by attribute type."
      },
      "description": "Description",
      "required": "Required",
      "readonly": "$t(label.readOnly)",
      "confidential": "Confidential",
      "multiple": "Multivalued",
      "placeholder": {
        "label": "Placeholder",
        "help": "Will be shown in empty attribute input as help text."
      },
      "defaultValue": "Default value",
      "unmodifiable": {
        "help": "System attribute cannot be deleted. Some of its configurations are not editable.",
        "label": "System attribute"
      }
    },
    "FormValue": {
      "ownerId": {
        "label": "Owner"
      },
      "value": {
        "label": "Attribute's value"
      },
      "persistentType": {
        "label": "Attribute type"
      }
    },
    "Role": {
      "_type": "Role",
      "code": {
        "label": "Code",
        "help": "Technical name"
      },
      "name": "Name",
      "roleType": "Type",
      "priority": "Priority",
      "priorityEnum": "Priority level",
      "disabled": "$t(label.disabled)",
      "approvable": "Approval required",
      "superiorRoles": "Superior roles",
      "subRoles": "Subordinate roles",
      "authorities": "Authorizations",
      "approveRemove": "Role removal approval",
      "canBeRequested": "Can be requested",
      "description": "Description",
      "guarantees": "Role authorizers",
      "roleCatalogue": {
        "name": "Folder in catalog"
      }
    },
    "RoleTreeNode": {
      "_type": "Automatic role",
      "role": "Role",
      "treeNode": "Tree node",
      "recursionType": "Recursion type"
    },
    "AutomaticRole": {
      "name": {
          "label": "Name",
          "help": "The name is used to easily identify the automatic role."
      },
      "role": {
        "label": "Role",
        "help": "Selected role will be assigned to identities base on specified Rules."
      },
      "attribute": {
        "type": {
          "label": "Type of checked attribute",
          "help": "For this attribute type, the value of the rule will be checked"
        },
        "concept": {
          "label": "Concept",
          "info": "Concept",
          "help": "This automatic role is a Concept. Push 'Recalculation' to assign the role to the users."
        },
        "attributeName": "Attribute name",
        "comparison": "Comparison type",
        "formAttribute": "Form attribute",
        "value": {
            "label": "Value",
            "help": "The value with which the value in the attribute will be compared."
          }
      }
    },
    "AuthorizationPolicy": {
      "_type": "Permission",
      "role": "Role",
      "disabled": {
        "label": "$t(label.disabled)",
        "help": "Inactive policy will not be applied"
      },
      "description": {
        "label": "Description"
      },
      "seq": {
        "label": "Order",
        "help": "Only for optimalization reasons. Order is used in permission evaluation on single record / entity. Simplest policy should have lower order, then it will be evaluated at first."
      },
      "evaluatorType": {
        "label": "Evaluator type"
      },
      "authorizableType": {
        "label": "Entity type",
        "placeholder": "Select entity type or leave it empty for all types",
        "help": "If entity type is not selected, then all types will be evaluating"
      },
      "evaluatorProperties": {
        "label": "Configuration",
        "title": "Evaluator configuration"
      },
      "basePermissions": {
        "label": "Permissions",
        "title": "Granted permission",
        "placeholder": "Select permissions",
        "help": "Permissions will be granted by evaluator configuration"
      }
    },
    "IdentityRole": {
      "_type": "Assigned role",
      "role" : "Role",
      "identityContract": {
        "label": "Contracted position",
        "title": "Contracted position",
        "placeholder": "Contracted position",
        "help": "Connection to organization or another tree structure"
      },
      "contractPosition": {
        "label": "Other positon",
        "title": "Other contracted positon"
      },
      "automaticRole": {
        "label": "Automatic role",
        "title": "Automatic role",
        "placeholder": "Automatic role",
        "help": "Role from contracted position"
      },
      "roleCataloguePicker": "Select a folder from the catalog",
      "directRole": {
        "label": "Direct role",
        "title": "Directly assigned role, which assigned this role as well (business role).",
        "help": "$t(entity.IdentityRole.directRole.title)"
      }
    },
    "IdentityAccount": {
      "attribute": {
        "name": "Attribute",
        "value": "Value"
      }
    },
    "Attachment": {
      "name": "Name",
      "description": "Description",
      "mimetype": "Type",
      "encoding": "Coding",
      "filesize": "Size [B]",
      "versionLabel": "Version"
    },
    "ApprovalTask": {
      "taskId": "Identifier",
      "taskName": "Task name",
      "createdDate": "Created",
      "closedDate": "Closed",
      "relatedTaskId": "ID of WF instance",
      "approvedBy": "Approved by",
      "taskState": "State",
      "note": "Note"
    },
    "IdentityContract": {
      "_type": "Positions",
      "id": "Internal position id",
      "treeType": "Structure type",
      "workPosition": "Position",
      "position": "Name of the position",
      "identity": "User",
      "validFrom": "$t(entity.validFrom)",
      "validTill": "$t(entity.validTill)",
      "guarantee": "Authorizer",
      "externe": "External contractor",
      "managers": {
        "label": "Authorizers",
        "title": "Authorizer and all managers for position in structure",
        "total": "Total number of authorizers"
      },
      "disabled": {
        "label": "$t(label.disabled)",
        "help": "Invalid work position. Roles cannot be assigned to invalid position. Depends on position's state."
      },
      "description": "Note",
      "main": {
        "label": "Main position",
        "help": "Main / prime work position. It's created automatically when the user is created.",
        "title": "Main position"
      },
      "state": {
        "label": "State",
        "help": "Contract's state"
      }
    },
    "ContractSlice": {
      "_type": "Time slices",
      "parentContract": "Parent contract relationship",
      "contractCode": "Code of contract relationship",
      "code": "Code of slice",
      "code": {
        "label": "Code of slice",
        "help": "Identifier of the time slice (typically external identifier from source system)."
      },
      "usingAsContract": {
        "label": "Currently used",
        "help": "If checked, this time slot is currently used as the source of the parent contract (the values on the parent contract are copied from this slice)."
      },
      "id": "$t(entity.IdentityContract.id)",
      "treeType": "$t(entity.IdentityContract.treeType)",
      "workPosition": "$t(entity.IdentityContract.workPosition)",
      "position": "$t(entity.IdentityContract.position)",
      "identity": "$t(entity.IdentityContract.identity)",
      "contractValidFrom": "$t(entity.validFrom)",
      "contractValidTill": "$t(entity.validTill)",
      "validFrom": "Valid from (slice)",
      "validTill": "Valid till (slice)",
      "guarantee": "$t(entity.IdentityContract.guarantee)",
      "externe": "$t(entity.IdentityContract.externe)",
      "managers": {
        "label": "$t(entity.IdentityContract.managers.label)",
        "title": "$t(entity.IdentityContract.managers.title)"
      },
      "disabled": {
        "label": "$t(entity.IdentityContract.disabled.label)",
        "help": "$t(entity.IdentityContract.disabled.help)"
      },
      "description": "$t(entity.IdentityContract.description)",
      "main": {
        "label": "$t(entity.IdentityContract.main.label)",
        "help": "$t(entity.IdentityContract.main.help)",
        "title": "$t(entity.IdentityContract.main.title)"
      },
      "state": {
        "label": "$t(entity.IdentityContract.state.label)",
        "help": "$t(entity.IdentityContract.state.help)"
      }
    },
    "TreeNode": {
      "_type": "Tree node",
      "id": "Identifier",
      "code": "Code",
      "name": "Name",
      "disabled": "$t(label.disabled)",
      "shortName": "Name",
      "parentId": "Superior element",
      "parent": {
        "name": "Superior element",
        "false": "Does not have parent"
      },
      "treeType": {
        "name": "Structure type"
      },
      "defaultTreeNode": {
        "label": "Default tree element",
        "true": "Yes",
        "false": "No"
      }
    },
    "TreeType": {
      "_type": "Structure",
      "code": "Code",
      "name": "Name",
      "defaultTreeType": {
        "label": "Default tree",
        "help": "This tree type will be used as default organization structure.",
        "true": "Yes",
        "false": "No"
      },
      "defaultTreeNode": {
        "label": "Default tree element",
        "help": "This tree element will be used as default, e.g. for default work position."
      }
    },
    "Delegate": {
      "_type": "Delegation",
      "id": "Internal id",
      "identity": "User",
      "delegate": "To user",
      "from": "from",
      "till": "to",
      "state": "Delegation state",
      "isDateUnlimited": "Unlimited date"
    },
    "WorkflowTaskInstance": {
      "taskDescription": "Subject",
      "taskCreated": "Created on",
      "id": "Task Id",
      "taskAssignee": "Assigned",
      "filter": {
        "created": "Tasks created",
        "createdBefore": "Tasks created before",
        "createdAfter": "Tasks created after"
      }
    },
    "WorkflowHistoricProcessInstance": {
      "name": "Process name",
      "startTime": "Created on",
      "endTime": "Ends on",
      "startActivityId": "Started by activity",
      "deleteReason": "Reason for deletion",
      "processVariables": "Process variables",
      "superProcessInstanceId": "Parent process id",
      "processDefinitionKey": "Code of the process definition",
      "id": "Id",
      "applicant": "Applicant"
    },
    "WorkflowHistoricTaskInstance": {
      "name": "Task name",
      "startTime": "Creation date",
      "endTime": "Ends on",
      "assignee": "Assigned (resolved)",
      "deleteReason": "Completed",
      "id": "Id",
      "priority": "Priority",
      "createTime": "Created on",
      "completeTaskDecision": "Result",
      "candicateUsers": "Can solve"
    },
    "Notification": {
      "topic": "Topic",
      "created": "$t(entity.created)",
      "message": {
        "level": "Level",
        "subject": "Subject",
        "message": "Message",
        "textMessage": "Message (text)",
        "htmlMessage": "Message (html)",
        "renderedHtmlMessage": "Message (rendered html)",
        "model": "Message (model)"
      },
      "sender": "Sender",
      "recipients": "Recipients",
      "sent": "Sent",
      "sentLog": "Message from sender",
      "type": "Type",
      "template": "Template"
    },
    "NotificationTemplate": {
      "_type": "Notification Template",
      "name": "Name",
      "code": "Code",
      "sender": "Sender address",
      "subject": "Subject",
      "parameter": {
        "name": "Parameters",
        "help": "List of template parameters. Parameters separate by comma."
      },
      "unmodifiable": {
        "name": "System template",
        "help": "System templates is necessary for correct functioning application. System templates can't be removed or change their code."
      },
      "bodyHtml": {
        "name": "Message body (html)",
        "help": "For a list of available templates write character '$'"
      },
      "bodyText": "Message body (text)"
    },
    "NotificationConfiguration": {
      "_type": "Configure notification",
      "topic": "$t(entity.Notification.topic)",
      "level": "Level",
      "notificationType": "Channel",
      "template": "Template",
      "description": "Description",
      "disabled": {
        "label": "$t(label.disabled)",
        "help": "Notifications will not be sent."
      },
      "redirect": {
        "label": "Redirect",
        "help": "Notification will be redirected to configured recipients. Notification to original recipient will be not sent."
      },
      "recipients": {
        "label": "Recipients",
        "help": "Additional notification will be sent to configured recipients. Recipients are required, if notification is redirected."
      }
    },
    "Email": {
      "topic": "$t(entity.Notification.topic)",
      "created": "$t(entity.Notification.created)",
      "message": {
        "subject": "$t(entity.Notification.message.subject)",
        "message": "$t(entity.Notification.message.message)",
        "textMessage": "$t(entity.Notification.message.textMessage)",
        "htmlMessage": "$t(entity.Notification.message.htmlMessage)",
        "model": "$t(entity.Notification.message.model)",
        "level": "$t(entity.Notification.message.level)"
      },
      "sender": "$t(entity.Notification.sender)",
      "recipients": "$t(entity.Notification.recipients)",
      "sent": "$t(entity.Notification.sent)",
      "sentLog": "$t(entity.Notification.sentLog)",
      "type": "$t(entity.Notification.type)"
    },
    "WebsocketLog": {
      "topic": "$t(entity.Notification.topic)",
      "created": "$t(entity.Notification.created)",
      "message": {
        "subject": "$t(entity.Notification.message.subject)",
        "message": "$t(entity.Notification.message.message)",
        "textMessage": "$t(entity.Notification.message.textMessage)",
        "htmlMessage": "$t(entity.Notification.message.htmlMessage)",
        "model": "$t(entity.Notification.message.model)",
        "level": "$t(entity.Notification.message.level)"
      },
      "sender": "$t(entity.Notification.sender)",
      "recipients": "$t(entity.Notification.recipients)",
      "sent": "$t(entity.Notification.sent)",
      "sentLog": "$t(entity.Notification.sentLog)",
      "type": "$t(entity.Notification.type)"
    },
    "SmsLog": {
      "topic": "$t(entity.Notification.topic)",
      "created": "$t(entity.Notification.created)",
      "message": {
        "subject": "$t(entity.Notification.message.subject)",
        "message": "$t(entity.Notification.message.message)",
        "textMessage": "$t(entity.Notification.message.textMessage)",
        "htmlMessage": "$t(entity.Notification.message.htmlMessage)",
        "model": "$t(entity.Notification.message.model)",
        "level": "$t(entity.Notification.message.level)"
      },
      "sender": "$t(entity.Notification.sender)",
      "recipients": "$t(entity.Notification.recipients)",
      "sent": "$t(entity.Notification.sent)",
      "sentLog": "$t(entity.Notification.sentLog)",
      "type": "$t(entity.Notification.type)"
    },
    "Configuration": {
      "name": "Key",
      "value": "Value",
      "secured": "System",
      "public": "Public",
      "confidential": "Confidential"
    },
    "Audit": {
      "label": "Audit",
      "id": "Revision ID",
      "modification": "Actions",
      "modifier": "Executed by",
      "revisionDate": "Date of revision",
      "changedAttributes": "Changed attributes",
      "type": "Entity type",
      "key": "Attribute",
      "value": "Value",
      "entityId": "Entity ID",
      "entity": "Entity (IdM)",
      "ownerId": "Owner id",
      "ownerType": "Owner type",
      "ownerCode": "Owner code",
      "subOwnerId": "Sub owner id",
      "subOwnerType": "Sub owner type",
      "subOwnerCode": "Sub owner code"
    },
    "LoggingEvent": {
      "id": "ID",
      "timestmp": "Date",
      "formattedMessage": "Formatted message",
      "loggerName": "Name of logger",
      "levelString": "Type",
      "threadName": "Thread",
      "arg0": "Argument 0",
      "arg1": "Argument 1",
      "arg2": "Argument 2",
      "arg3": "Argument 3",
      "callerFilename": "From file",
      "callerClass": "From class",
      "callerMethod": "From method",
      "callerLine": "Line",
      "text": "Logging event content"
    },
    "LoggingEventException": {
      "id": "Row",
      "traceLine": "Record"
    },
    "PasswordPolicy": {
      "type": {
        "label": "Type"
      },
      "name": {
        "label": "Name"
      },
      "basic": {
        "label": "Basic information"
      },
      "bases": {
        "label": "Characters",
        "help": "Character set allowed for password generation. Forbidden characters are excluded from sets."
      },
      "generateType": {
        "label": "Generation type"
      },
      "disabled": {
        "label": "$t(label.disabled)"
      },
      "description": {
        "label": "Description"
      },
      "defaultPolicy": {
        "label": "Default policy",
        "help": "Default policy is used for CzechIdM and all systems without set policy."
      },
      "passwordLengthRequired": {
        "label": "Password length requirement"
      },
      "minPasswordLength": {
        "label": "Minimum length"
      },
      "maxPasswordLength": {
        "label": "Maximum length"
      },
      "upperCharRequired": {
        "label": "Uppercase letters requirement"
      },
      "minUpperChar": {
        "label": "Minimum number of uppercase letters"
      },
      "lowerCharRequired": {
        "label": "Lowercase letters requirement"
      },
      "minLowerChar": {
        "label": "Minimum number of lowercase letters"
      },
      "numberRequired": {
        "label": "Digits requirement"
      },
      "minNumber": {
        "label": "Minimum number of digits"
      },
      "specialCharRequired": {
        "label": "Special characters requirement"
      },
      "minSpecialChar": {
        "label": "Minimum number of special characters"
      },
      "prohibitedCharacters": {
        "label": "Forbidden characters",
        "help": "Listed characters are not allowed for generating and validating passwords. Enter characters without spaces, e.g. 1LliIo0!"
      },
      "weakPassRequired": {
        "label": "Required weak passwords"
      },
      "weakPass": {
        "label": "Weak passwords"
      },
      "passphraseWords": {
        "label": "Number of words in passphrase",
        "help": "Select number of words passphrase contains."
      },
      "maxPasswordAge": {
        "label":"Maximum password age",
        "help": "Maximum number of days for password validity."
      },
      "minPasswordAge": {
        "label": "Minimum number of days for password validity",
        "help": "Minimum number of days for password validity."
      },
      "enchancedControl": {
        "label": "Enabled",
        "help": "Enhanced control makes passwords more secure by comparing new passwords with previous ones and user attributes. It is possible to select which rules are required."
      },
      "minRulesToFulfill": {
        "label": "Minimum number of additional rules for policy",
        "help": "Minimum number of the requirements which password must match to be valid."
      },
      "maxHistorySimilar": {
        "label": "Number of old passwords checked for match",
        "help": "Number of retroactively checked passwords, which cannot be same as new."
      },
      "blockLoginTime": {
        "label": "Login blocking time (seconds)",
        "help": "After entering X failed attempts, the user will be blocked from signing in."
      },
      "maxUnsuccessfulAttempts": {
        "label": "Maximum number of unsuccessful login attempts",
        "help": "Number of unsuccessful login attempts. Upon overrun, the user will be blocked from logging into the application."
      },
      "lowerCharBase": {
        "label": "Lowercase letters"
      },
      "upperCharBase": {
        "label": "Uppercase letters"
      },
      "numberBase": {
        "label": "Digits"
      },
      "specialCharBase": {
        "label": "Special characters"
      },
      "identityAttributeCheck": {
        "label": "User attributes not allowed in password",
        "help": "Password may not contain any listed attributes or variations thereof."
      },
      "prefix": {
        "label": "Prefix",
        "help": "The prefix will be automatically added to the beginning of the generated part. To skip the prefix, leave the field blank."
      },
      "suffix": {
        "label": "Suffix",
        "help": "Suffix will be automatically added to the end of the generated part. To skip the suffix, leave the field blank."
      }
    },
    "Module": {
      "id": "ID",
      "name": "Module name",
      "vendor": "Provider",
      "version": "Version",
      "description": "Description",
      "disabled": "$t(label.disabled)",
      "documentation": "Documentation",
      "build": "Build",
      "buildNumber": "Revision",
      "buildTimestamp": "Build date"
    },
    "EntityEventProcessor": {
      "id": "ID",
      "name": "Name",
      "module": "Module",
      "description": "Description",
      "entityType": "Entity type",
      "eventType": "Event type",
      "eventTypes": "Event types",
      "order": "Order",
      "disabled": "$t(label.disabled)",
      "disableable": "Cannot be inactivated",
      "closeable": "Closes processing"
    },
    "LongRunningTask": {
      "taskId": "Task ID",
      "taskType": "Task type",
      "taskDescription": "Description",
      "count": "Count",
      "counter": "Processed",
      "successItemCount": {
        "help": "Item count - success"
      },
      "warningItemCount": {
        "help": "Item count - warning"
      },
      "failedItemCount": {
        "help": "Item count - failed"
      },
      "started": "Started",
      "notstarted": "Not started yet!",
      "result": {
        "state": "State",
        "code": "Code"
      },
      "instanceId": {
        "label": "Instance",
        "help": "Task will be executed on server (instance identifier)"
      },
      "duration": "Task duration",
      "taskProperties": {
        "label": "Parameters"
      }
    },
    "LongRunningTaskItem": {
      "referencedEntityId": {
        "label": "Entity",
        "placeholder": "Entity identifier"
      },
      "result": {
        "state": "State"
      },
      "referencedDtoType": "Entity type"
    },
    "SchedulerTask": {
      "_type": "Scheduled task",
      "id": "Identificator",
      "taskType": "Task type",
      "instanceId": {
        "label": "Instance",
        "help": "Execute on server (instance identifier)"
      },
      "description": "Description",
      "dryRun" : "Dry run",
      "triggers": "Scheduled starts",
      "trigger": {
        "_type": {
          "label": "Type",
          "help": "Scheduled start type"
        },
        "fireTime": "Fire time",
        "cron": {
          "label": "Cron expression",
          "help": "Quartz cron",
          "link": {
            "href": "http://www.quartz-scheduler.org/documentation/quartz-2.x/tutorials/crontrigger.html",
            "text": "expression"
          }
        },
        "dependent": {
          "initiatorTaskId": {
            "label": "Other task",
            "help": "Triggered, when other scheduled task successful end."
          }
        }
      },
      "parameters": {
        "label": "Parameters"
      }
    },
    "RoleRequest": {
      "applicant": "Requested for",
      "implementer": "Applicant",
      "state": "State",
      "executeImmediately": "Without approval",
      "log": "Log",
      "description": {
        "label" : "Description",
        "placeholder": "Verbal description of a request to change the permissions"
      },
      "created": "Created",
      "modified": "Modified",
      "candicateUsers": "Can solve",
      "currentActivity": "Approval state",
      "originalRequest": "Original request",
      "wfProcessId": "WF identifier"
    },
    "ConceptRoleRequest": {
      "identityContract": "Employment relationship",
      "operation": "Operation",
      "role": "Role",
      "validFrom": "From",
      "validTill": "Till",
      "wfProcessId": "Id WF process",
      "state": "State",
      "created": "Created",
      "modified": "Modified"
    },
    "ContractGuarantee": {
      "identityContractId": "Contracted position",
      "guarantee": {
        "label": "Guarantee",
        "help": "Guarantee assigned to contracted position"
      }
    },
    "ContractPosition": {
      "_type": "Other contracted positon",
      "identityContract": {
        "label": "Contracted position"
      },
      "workPosition": {
        "label": "Position"
      },
      "position": {
        "label": "Name of the position"
      }
    },
    "ContractSliceGuarantee": {
      "contractSliceId": "Time slice of contract position",
      "guarantee": {
        "label": "Guarantee",
        "help": "Guarantee assigned to slice of contract position"
      }
    },
    "AutomaticRoleRequest": {
      "role": "Requested for role",
      "implementer": "Applicant",
      "automaticAttributeRole": "Automatic role (by attribute)",
      "automaticTreeRole": "Automatic role (by tree)",
      "requestType": "Type of automatic role",
      "operation": "Requested change",
      "state": "State",
      "name": "Name of automatic role",
      "executeImmediately": "Without approval",
      "description": {
        "label" : "Description",
        "placeholder": "Verbal description of a request"
      },
      "created": "Created",
      "modified": "Modified",
      "candicateUsers": "Approvers",
      "currentActivity": "Approval state",
      "wfProcessId": "WF identifier"
    },
    "Request": {
      "requestType": "Request for",
      "state": "State",
      "name": "Name",
      "executeImmediately": "Without approval",
      "description": {
        "label" : "Description",
        "placeholder": "Verbal description of a request"
      },
      "created": "Created",
      "modified": "Modified",
      "candicateUsers": "Approvers",
      "currentActivity": "Approval state",
      "wfProcessId": "WF identifier",
      "result": "Result",
      "implementer": "Implementer",
      "entity": "Request for"
    },
    "RequestItem": {
      "state": "State",
      "created": "Created",
      "modified": "Modified",
      "ownerType": "Object type",
      "operation": "Requested change",
      "ownerId":"Target object",
      "candicateUsers": "Approvers",
      "currentActivity": "Approval state",
      "wfProcessId": "WF identifier",
      "data": "Data",
      "result": "Result"
    },
    "AutomaticRoleAttributeRuleRequest": {
      "type": {
        "label": "$t(entity.AutomaticRole.attribute.type.label)",
        "help": "$t(entity.AutomaticRole.attribute.type.help)"
      },
      "concept": {
        "label": "$t(entity.AutomaticRole.attribute.concept.label)",
        "info": "$t(entity.AutomaticRole.attribute.concept.info)",
        "help": "$t(entity.AutomaticRole.attribute.type.help)"
      },
      "attributeName": "$t(entity.AutomaticRole.attribute.attributeName)",
      "comparison": "$t(entity.AutomaticRole.attribute.comparison)",
      "formAttribute": "$t(entity.AutomaticRole.attribute.formAttribute)",
      "value": {
          "label": "$t(entity.AutomaticRole.attribute.value.label)",
          "help": "$t(entity.AutomaticRole.attribute.value.help)"
        }
    },
    "EntityEvent": {
      "_type": "Event",
      "created": {
        "label": "Event date"
      },
      "superOwnerId": {
        "label": "Super owner"
      },
      "owner": {
        "label": "Entity"
      },
      "ownerType": {
        "label": "Entity type"
      },
      "ownerId": {
        "label": "Entity identifier"
      },
      "result": {
        "label": "Result"
      },
      "eventType": {
        "label": "$t(entity.EntityEventProcessor.eventType)",
        "title": "Event type"
      },
      "rootId": {
        "label": "Root"
      },
      "parent": {
        "label": "Parent event"
      },
      "instanceId": {
        "label": "$t(entity.LongRunningTask.instanceId.label)",
        "help": "$t(entity.LongRunningTask.instanceId.help)"
      },
      "processedOrder": {
        "label": "Zpracované pořadí"
      },
      "executeDate": {
        "label": "Execute date",
        "help": "Event will be processed in given time."
      },
      "priority": {
        "label": "Priority",
        "help": "Event with the higher priority will be executed earlier."
      }
    },
    "EntityState": {
      "_type": "Entity state",
      "created": {
        "label": "Date"
      },
      "owner": {
        "label": "Entity"
      },
      "ownerType": {
        "label": "Entity type"
      },
      "ownerId": {
        "label": "Entity identifier"
      },
      "result": {
        "label": "Result"
      },
      "event": {
        "label": "Event"
      },
      "instanceId": {
        "label": "$t(entity.LongRunningTask.instanceId.label)",
        "help": "$t(entity.LongRunningTask.instanceId.help)"
      },
      "processorModule": {
        "label": "Module"
      },
      "processorId": {
        "label": "Processor"
      },
      "processorName": {
        "label": "Processor"
      },
      "processedOrder": {
        "label": "Processed order"
      }
    },
    "GenerateValue": {
      "dtoType": {
        "label": "Entity type",
        "placeholder": "Select type of entity",
        "help": "Generation is done for a specific type of entity. Based on the selected entities will be shown generators"
      },
      "generatorType": {
        "label": "Generator type",
        "placeholder": "Select type of generator"
      },
      "seq": {
        "label": "Order",
        "placeholder": "Setup order",
        "help": "Generators are handled in order from the smallest to the largest. If two generators generate values for the same attribute, the resulting value will be generated and used from the last generator."
      },
      "description": {
        "label": "Description"
      },
      "disabled": {
        "label": "Disabled",
        "help": "Disabled generators are ignored"
      },
      "regenerateValue": {
        "label": "Regenerate value",
        "help": "If will be checkbox checked, the value from user will be regenerated by the generator. If will be checkbox unchecked, the generator will not change value."
      },
      "unmodifiable": {
        "label": "System generator",
        "help": "System generator cannot be deleted. Some of its configurations are not editable."
      }
    }
  },
  "wf": {
    "approve-identity-change-permissions" : {
      "name": "Change of permissions for user '{{0}}'",
      "task": {
        "approveByHelpDesk": {
          "name": "Approval by 'Helpdesk'",
          "description":"Approving a change of permissions for '{{0}}' (Helpdesk)"
        },
        "returnedRequestFromHelpdesk": {
          "name": "The request was returned from 'Helpdesk'",
          "description":"Returned change of permissions request for '{{0}}'"
        },
        "approveByManager": {
          "name": "Approval by manager",
          "description":"Approving a change of permissions by manager for '{{0}}'"
        },
        "returnedRequestFromManager": {
          "name": "The request was returned from manager",
          "description":"Returned change of permissions request for '{{0}}'"
        },
        "approveByUserManager": {
          "name": "Approval by user manager",
          "description":"Approving a change of permissions by user manager for '{{0}}'"
        },
        "returnedRequestFromUserManager": {
          "name": "The request was returned from user manager",
          "description":"Returned change of permissions request for '{{0}}'"
        },
        "approvedBySecurity": {
          "name": "Approval by security department",
          "description":"Approving a change of permissions by security department for '{{0}}'"
        }
      }
    },
    "change-role-without-approve" : {
      "name": "Change assignment of the role (add / remove / change) '{{0}}' for user '{{1}}'"
    },
    "approve-role-by-manager" : {
      "name": "Approval change of assignmented role '{{0}}' for user '{{1}}'",
      "task": {
        "approveAssignByManager": {
          "name": "Approval of assignment role by the manager",
          "description":"Approval of assignment role '{{0}}' by the manager for the user '{{1}}'"
        },
        "approveChangeByManager": {
          "name": "Approval of validity change of the role by the manager",
          "description":"Approval of validity change of the role '{{0}}' by the manager for the user '{{1}}'"
        }
      }
    },
    "approve-remove-role-by-manager" : {
      "name": "Approval remove of assignmented role '{{0}}' for user '{{1}}'",
      "task": {
        "approveByManager": {
          "name": "Approval remove of assignmented role by user's manager",
          "description":"Approval remove of assignmented role '{{0}}' by user's manager for the user '{{1}}'"
        }
      }
    },
    "approve-role-by-guarantee" : {
      "name": "Approval change of assignmented role '{{0}}' for user '{{1}}'",
      "name_automaticRole": "Approve change in automatic role assignment '{{0}}' by his guarantee",
      "task": {
        "approveAssign": {
          "name": "Approval the role assignment by the guarantee",
          "description":"Approval the role '{{0}}' assignment by the guarantee for user '{{1}}'"
        },
        "approveChange": {
          "name": "Approval of validity change of the role by the guarantee",
          "description":"Approval of validity change of role '{{0}}' by the guarantee for user '{{1}}'"
        },
        "approveAutomaticRole": {
          "name": "Approval create/change/remove of automatic role by the guarantee",
          "description":"Approval create/change/remove of automatic role '{{0}}' by the guarantee"
        }
      }
    },
    "approve-role-by-guarantee-security" : {
      "name": "Approval change of assignmented role '{{0}}' by the guarantee and security department for user '{{1}}'",
      "name_automaticRole": "Approve change in automatic role assignment '{{0}}' by his guarantee and security department",
      "task": {
        "approveAssignByGuarantee": {
          "name": "Approval the role assignment by the guarantee",
          "description":"Approval the role '{{0}}' assignment by the guarantee for user '{{1}}'"
        },
        "approveChangeByGuarantee": {
          "name": "Approval of validity change of the role by the guarantee",
          "description":"Approval of validity change of role '{{0}}' by the guarantee for user '{{1}}'"
        },
        "approveAssignBySecurity": {
          "name": "Approval the role assignment by security department",
          "description":"Approval the role '{{0}}' assignment by security department for user '{{1}}'"
        },
        "approveChangeBySecurity": {
          "name": "Approval of validity change of the role by security department",
          "description":"Approval of validity change of role '{{0}}' by security department for user '{{1}}'"
        },
        "approveAutomaticRole": {
          "name": "Approval create/change/remove of automatic role",
          "description":"Approval create/change/remove of automatic role '{{0}}'"
        },
        "approveAutomaticRoleBySecurity": {
          "name": "Approval create/change/remove of automatic role",
          "description":"Approval create/change/remove of automatic role '{{0}}'"
        }
      }
    },
    "request-idm-role" : {
      "name": "Request for change/create/remove role with name '{{0}}'",
      "task": {
        "approveAutomaticRole": {
          "name": "Approve role changes by guarantee",
          "description":"Request for change/create/remove role with name '{{0}}'"
        }
      }
    },
    "request-idm-role-composition" : {
      "name": "Approving request change of business role",
      "task": {
        "approveAddBusinessRole": {
          "name": "Approve adding the new business role",
          "description":"Approval of adding business role with name '{{0}}' as '{{1}}' to role '{{2}}'"
        },
        "approveRemoveBusinessRole": {
          "name": "Approve removing the business role",
          "description":"Approve removal of the business role ({{0}}) with name '{{1}}' from role '{{2}}'."
        }
      }
    },
    "COMMENT":"If you can not find a translation for a specific WF definition, then we'll try to locate the translation in global tasks (by task key only):",
    "task": {
      "approveByManager": {
        "name": "Approving by manager",
        "description":"Approving by manager"
      }
    },
    "decision" : {
      "approve": {
        "label" : "Accept",
        "tooltip": "Executes approval of the task.",
        "warning": "Do you want to approve the request?"
      },
      "disapprove": {
        "label" : "Reject",
        "tooltip": "Reject task.",
        "warning": "Do you want to reject the request?"
      },
      "backToApplicant": {
        "label" : "Return to applicant",
        "tooltip": "Returns request to requester.",
        "warning": "Do you want to return the request?"
      },
      "createRequest": {
        "label" : "Submit request",
        "tooltip": "Submit request.",
        "warning": "Do you want to submit the request?"
      },
      "cancelRequest": {
        "label" : "Delete request",
        "tooltip": "Delete this request.",
        "warning": "Do you want to delete the request?"
      },
      "repairedRequest": {
        "label" : "Request repaired",
        "tooltip": "Request was repaired by comments.",
        "warning": "Do you want return request to approve?"
      }
    },
    "formData" : {
      "applicantDescription": {
        "name" : "Requester's note",
        "tooltip": "Requester's note in submitted request",
        "placeholder": "Requester's note in submitted request"
      },
      "managerDescriptionForApplicant": {
        "name" : "Note for requester",
        "tooltip": "Note for requester in returned request",
        "placeholder": "Note for requester in returned request"
      },
      "managerDescription": {
        "name" : "Authorizer's note",
        "tooltip": "Note from authorizer.",
        "placeholder": "Note from authorizer."
      },
      "description": {
        "name" : "Note",
        "tooltip": "",
        "placeholder": ""
      },
      "roleName": {
        "name" : "Role name",
        "tooltip": "",
        "placeholder": ""
      },
      "validFrom": {
        "name" : "$t(entity.validFrom)",
        "tooltip": "",
        "placeholder": ""
      },
      "validTill": {
        "name" : "$t(entity.validTill)",
        "tooltip": "",
        "placeholder": ""
      },
      "validFromDateOld": {
        "name" : "$t(entity.validFrom) (old)",
        "tooltip": "",
        "placeholder": ""
      },
      "validTillDateOld": {
        "name" : "$t(entity.validTill) (old)",
        "tooltip": "",
        "placeholder": ""
      },
      "validFromDateNew": {
        "name" : "$t(entity.validFrom) (new)",
        "tooltip": "",
        "placeholder": ""
      },
      "validTillDateNew": {
        "name" : "$t(entity.validTill) (new)",
        "tooltip": "",
        "placeholder": ""
      }
    }
  },
  "eav": {
    "bulk-action": {
      "identity-disable-bulk-action": {
        "label": "Deactivate - (manually)"
      },
      "identity-enable-bulk-action": {
        "label": "Activate - (manually)"
      },
      "identity-delete-bulk-action": {
        "label": "Remove",
        "help": "Remove selected users.",
        "icon": "fa:trash"
      },
      "identity-add-role-bulk-action": {
        "label": "Roles assignment",
        "attributes": {
          "role": {
            "label": "Roles",
            "help": ""
          },
          "approve": {
            "label": "Approve",
            "help": "After check, the role assignment will be approved"
          },
          "maincontract": {
            "label": "Assign to main contract only",
            "help": "Assigning new roles will only be done on the main contract."
          },
          "validfrom": {
            "label": "Valid from",
            "help": ""
          },
          "validtill": {
            "label": "Valid till",
            "help": ""
          }
        }
      },
      "identity-remove-role-bulk-action": {
        "label": "Role removing",
        "attributes": {
          "role": {
            "label": "Roles",
            "help": ""
          },
          "approve": {
            "label": "Approve",
            "help": "After check, the role remove will be approved"
          },
          "maincontract": {
            "label": "Remove only from the main contract",
            "help": "Removing role/s will only be done from the main contract."
          }
        }
      },
      "identity-save-bulk-action": {
        "label": "Re-save identity",
        "attributes": {
          "onlynotify": {
            "label": "Throw only NOTIFY event",
            "help": "After selecting, the user's classic save will not be invoked, but only NOTIFY event will be thrown. This event is also processed asynchronously."
          }
        }
      },
      "role-delete-bulk-action": {
        "label": "Remove",
        "help": "Remove selected roles.",
        "icon": "fa:trash"
      },
      "core-entity-event-delete-bulk-action": {
        "label": "Remove",
        "help": "Remove selected events.",
        "icon": "fa:trash"
      }
    },
    "authorization-evaluator": {
      "identity-form-value-evaluator": {
        "help": "Permissions to identity form attribute values. By definition (main if not specified) and attrinute codes (all if not specified).",
        "attributes": {
          "form-definition": {
            "label": "Form definition",
            "help": "Select definition, which contains attributes. Main definition will be used as default.",
            "placeholder": "Main definition for identities or select ..."
          },
          "attributes": {
            "label": "Attributes",
            "help": "Add permission to attributes. All attributes from selected form definition will be used as default.",
            "placeholder": "All attributes or attribute codes (use comma as separator)"
          },
          "self-only": {
            "label": "Logged user only",
            "help": "Add permission to currently logged user only. Logged user doesn't get permissions to other users attributes."
          },
          "owner-update": {
            "label": "By permission to update user",
            "help": "Add permission to attributes of users, which can be updated by the logged user (for example, when logged user can update identity, then he can update attributes too)."
          },
          "owner-read": {
            "label": "By permission to read user",
            "help": "Add permission to attributes of users, which can be read by the logged user (for example, when logged user can read identity, then he can update attributes)."
          }
        }
      },
      "form-definition-uuid-evaluator": {
        "help": "Permissions for form definition.",
        "attributes": {
          "uuid": {
            "label": "Form definition",
            "help": "",
            "placeholder": "Select form definition ..."
          }
        }
      },
      "core-profile-by-identity-evaluator": {
        "help": "Permissions to identity profile (picture)",
        "attributes": {
          "identity-read": {
            "label": "By permission to read user",
            "help": "Add permission to profile of users, which can be read by the logged user (for example, when logged user can read identity, then he can update her profile)."
          }
        }
      }
    },
    "value-generator": {
      "core-identity-username-value-generator": {
        "label": "Standard username generator",
        "help": "The generator generates the user name based on the 'first name' and 'surname'. Generator deletes the diacritic, cuts first name and surname to a defined number of characters, and connects them with connection character.",
        "attributes": {
          "connectioncharacter": {
            "label": "Connection character",
            "help": "The character(s) to be used to connects the first name and surname. The value does not need to be filled in. In this case, the first name and surname will be connected without any coupling character."
          },
          "firstnamecharactercount": {
            "label": "Count of characters from the first name",
            "help": "The maximum count of characters to use from the fisrt name."
          },
          "lastnamecharactercount": {
            "label": "Count of characters from the surname",
            "help": "The maximum count of characters to use from the surname."
          },
          "searchuniqueusername": {
            "label": "Verify unique username",
            "help": "The newly generated username will be searched. If username will be exists, numeric suffix will be added. Suffix may be incremented."
          },
          "firstnamefirst": {
            "label": "As first value use first name",
            "help": "When generating, the first name of the user will be added first. If you unchecked, the order will be the opposite."
          }
        }
      },
      "core-identity-email-value-generator": {
        "label": "Standard email generator",
        "help": "The generator generates the email adress based on the username. Adds a defined suffix to the username. Beware, the result value must match the correct email address format.",
        "attributes": {
          "emailsuffix": {
            "label": "Email suffix",
            "help": "The Suffix will be added to the username and together they must create an email address."
          },
          "connectioncharacter": {
            "label": "Connection character",
            "help": "The character(s) to be used to connects the first name and surname. The value does not need to be filled in. In this case, the first name and surname will be connected without any coupling character."
          },
          "firstnamecharactercount": {
            "label": "Count of characters from the first name",
            "help": "The maximum count of characters to use from the fisrt name."
          },
          "lastnamecharactercount": {
            "label": "Count of characters from the surname",
            "help": "The maximum count of characters to use from the surname."
          },
          "generatefromusername": {
            "label": "Generate based on username",
            "help": "Email will be based on existing username. The username must exist at the moment of generation."
          },
          "firstnamefirst": {
            "label": "As first value use first name",
            "help": "When generating, the first name of the user will be added first. If you unchecked, the order will be the opposite."
          }
        }
      },
      "core-identity-script-value-generator": {
        "label": "Scripted Generator",
        "help": "The generator executes the defined script. At the script input are these attributes 'entity' and 'valueGenerator'. Beware functionality 'value regenerate' must implement the script itself. The script must be from the system category.",
        "attributes": {
          "scriptcode": {
            "label": "Script code",
            "help": "Script code to run."
          }
        }
      },
      "core-identity-form-default-value-generator": {
        "label": "Addition default values for the forms with next inforamtion",
        "help": "Generator add default values for all attributes.",
        "attributes": {
          "formdefinitionuuid": {
            "label": "Form",
            "help": "Form must be for given entity type (IdmIdentity). If you leave form empty, the values will be added to all form definition."
          },
          "regexmultiplevalues": {
            "label": "Separator",
            "help": "If the attribute is multi-valued and the default value contains multiple values, write character(s) that seperate values. If left blank, a default character will be used ','."
          }
        }
      }
    },
    "long-running-task": {
      "core-test-long-running-task": {
        "label": "Test task",
        "help": "Counts to given count, waits 300ms for every iteration.",
        "attributes": {
          "count": {
            "label": "Count",
            "help": "Counts to given count, waits 300ms for every iteration."
          }
        }
      }
    }
  },
  "error": {
    "AUTH_FAILED": {
      "title": "Login failed",
      "message": "Invalid login or password."
    },
    "AUTHORITIES_CHANGED": {
      "title": "Your application permissions have been modified",
      "message": "Your application permissions have been modified, please log-in again."
    },
    "FORBIDDEN": {
      "title": "Insufficient permissions",
      "message": "You do not have sufficient permissions for selected action."
    },
    "FORBIDDEN_ENTITY": {
      "title": "Insufficient permissions",
      "message": "You do not have insufficient permission [{{permission}}] for selected record [{{entity}}]."
    },
    "PASSWORD_CHANGE_NO_SYSTEM": {
      "title": "Password change failed",
      "message": "Please, select at least one system, where password will be changed."
    },
    "PASSWORD_CHANGE_CURRENT_FAILED_IDM": {
      "title": "Password change failed",
      "message": "Original password is not correct."
    },
    "LOG_IN": {
      "title": "Session timeout",
      "message": "Please log-in again."
    },
    "XSRF": {
      "title": "Session timeout",
      "message": "Your login token timed out. Please log-in again."
    },
    "MUST_CHANGE_IDM_PASSWORD": {
      "title": "Password change required",
      "message": "It is required to change your password for CzechIdM."
    },
    "PASSWORD_CHANGE_FAILED": {
      "title": "Password change wasn't completed",
      "message": "{{0}}"
    },
    "PASSWORD_CHANGE_DISABLED": {
      "title": "Password change wasn't completed",
      "message": "Password change is disabled."
    },
    "PASSWORD_CHANGE_ALL_ONLY": {
      "title": "Password change wasn't completed",
      "message": "Password change is possible for all accounts together only."
    },
    "PASSWORD_DOES_NOT_MEET_POLICY": {
      "title": "New password doesn't meet password policy",
      "message": "{{0}}"
    },
    "PASSWORD_CANNOT_CHANGE": {
      "title": "Password wasn't changed",
      "message": "Try it again after {{date}}."
    },
    "PASSWORD_POLICY_MAX_LENGTH_LOWER": {
      "title": "Password policy wasn't saved",
      "message": "Maximum length must be greater than minimum length."
    },
    "PASSWORD_POLICY_ALL_MIN_REQUEST_ARE_HIGHER": {
      "title": "Password policy wasn't saved",
      "message": "Count of all minimum lengths is bigger than maximum password length."
    },
    "PASSWORD_POLICY_MAX_AGE_LOWER": {
      "title": "Password policy wasn't saved",
      "message": "Maximum period for password change cannot be shorter than minimum period."
    },
    "PASSWORD_POLICY_DEFAULT_TYPE": {
      "title": "Password policy wasn't saved",
      "message": "Default password policy already exists."
    },
    "PASSWORD_POLICY_DEFAULT_TYPE_NOT_EXIST": {
      "title": "Password policy wasn't saved",
      "message": "Default password policy doesn't exists."
    },
    "PASSWORD_POLICY_BAD_TYPE": {
      "title": "Password policy wasn't saved",
      "message": "Policy has incorrect type. Use validating policies for validation and generating policies for generating."
    },
    "PASSWORD_POLICY_NEGATIVE_VALUE": {
      "title": "Password values can not have negative values",
      "message": "Attribute [{{attribute}}] is negative."
    },
    "PASSWORD_POLICY_VALIDATION": {
      "title": "Password policy wasn't saved",
      "message": "Problem with validation of password policy."
    },
    "PASSWORD_POLICY_MAX_RULE": {
      "title": "Exceeded the number of rules",
      "message": "Minimum rules to fulfill can be {{rules}} or less."
    },
    "TASK_SAME_DELEGATE_AS_CURRENT_IDENTITY": {
      "title": "Saving of delegation failed",
      "message": "You cannot set delegation on yourself [user: {{identity}}]."
    },
    "ENDPOINT_NOT_FOUND": {
      "title": "Endpoint not found",
      "message": "Application points out to non-existent path [{{path}}]."
    },
    "BAD_REQUEST": {
      "title": "Bad request"
    },
    "BAD_VALUE": {
      "title": "Bad value"
    },
    "BAD_UUID": {
      "title": "Unexpected identifier",
      "message": "Identifier [{{uuid}}] is not valid. Expecting uuid."
    },
    "ROLE_CATALOGUE_BAD_PARENT": {
      "title": "Superior folder cannot be set.",
      "message": "Invalid superior folder. Please, select another."
    },
    "IDMROLE_NAME_DUPLICATE": {
      "title": "Role already exists",
      "message": "Role with this name already exists"
    },
    "CONFLICT": {
      "title": "Record is on collision with another unique record",
      "message": ""
    },
    "NAME_CONFLICT": {
      "title": "Conflict with name",
      "message": "Record with given name already exists."
    },
    "CODE_CONFLICT": {
      "title": "Conflict with code",
      "message": "Record with given code already exists."
    },
    "IDENTITY_NOT_FOUND": {
      "title": "Not found",
      "message": "Identity [{{identity}}] does not exist"
    },
    "NOT_FOUND": {
      "title": "Not found",
      "message": "Record [{{entity}}] not found"
    },
    "MODULE_NOT_DISABLEABLE": {
      "title": "Module [{{module}}] cannot be disabled",
      "message": "Module functions are essential for application."
    },
    "MODULE_DISABLED": {
      "title": "The module is deactivated",
      "message": "Module [{{module}}] is deactivated or isn't installed."
    },
    "CONFIGURATION_DISABLED": {
      "title": "Function is deactivated",
      "message": "Application function directed by configuration item [{{property}}] is deactivated."
    },
    "TREE_TYPE_DELETE_FAILED_HAS_CHILDREN": {
      "title": "Structure cannot be removed",
      "message": "Structure type [{{treeType}}] has sub elements. Remove all sub elements first."
    },
    "TREE_TYPE_DELETE_FAILED_HAS_CONTRACTS": {
      "title": "Structure cannot be removed",
      "message": "Structure type [{{treeType}}] is used in contracted positions. Edit all used contracted positions before removing."
    },
    "TREE_NODE_DELETE_FAILED_HAS_CHILDREN": {
      "title": "Structure element cannot be removed",
      "message": "Structure element [{{treeNode}}] has sub elements. Remove all sub elements first."
    },
    "TREE_NODE_DELETE_FAILED_HAS_CONTRACTS": {
      "title": "Structure element cannot be removed",
      "message": "Structure element [{{treeNode}}] is used in contracted positions. Edit all used contracted positions before removing."
    },
    "TREE_NODE_DELETE_FAILED_HAS_CONTRACT_POSITIONS": {
      "title": "Structure element cannot be removed",
      "message": "Structure element [{{treeNode}}] is used in other contracted positions. Edit all used other contracted positions before removing."
    },
    "TREE_NODE_DELETE_FAILED_HAS_CONTRACT_SLICES": {
      "title": "Structure element cannot be removed",
      "message": "Structure element [{{treeNode}}] is used in contract slice positions. Edit all used contract slice positions before removing."
    },
    "TREE_NODE_BAD_TYPE": {
      "title": "Wrong element type",
      "message": "Please select different element type."
    },
    "TREE_NODE_BAD_PARENT": {
      "title": "Superior element cannot be set",
      "message": "Invalid superior element, please select another."
    },
    "TREE_NODE_BAD_NICE_NAME" : {
      "title": "Duplicate name for user",
      "message": "This level already contains this tree node name for user: [{{name}}]."
    },
    "GROOVY_SCRIPT_VALIDATION": {
      "title": "Groovy script contains compile errors",
      "message": "Groovy script contains compile errors"
    },
    "GROOVY_SCRIPT_SYNTAX_VALIDATION": {
      "title": "Groovy script contains syntax errors",
      "message": "Error message: {{message}} at line {{line}}."
    },
    "GROOVY_SCRIPT_SECURITY_VALIDATION": {
      "title": "Groovy script did not past safety check!",
      "message": "Reason: {{message}}"
    },
    "ROLE_CATALOGUE_DELETE_FAILED_HAS_CHILDREN": {
      "title": "Role catalog cannot be removed",
      "message": "Role catalog [{{roleCatalogue}}] contains child catalog. Remove all child catalogs first."
    },
    "ROLE_CATALOGUE_BAD_NICE_NAME" : {
      "title": "Duplicate name for user",
      "message": "This level already contains this catalog name for user: [{{name}}]."
    },
    "AUDIT_REVISION_NOT_SAME": {
      "title": "Revisions aren't comparable",
      "message": "Revisions must be the same type and from the same entity."
    },
    "AUDIT_ENTITY_CLASS_NOT_FOUND": {
      "title": "Class not found",
      "message": "Class [{{class}}] not found."
    },
    "AUDIT_ENTITY_CLASS_IS_NOT_FILLED": {
      "title": "Class not filled",
      "message": "Class for searching not filled."
    },
    "BAD_FILTER": {
      "title": "Filter isn't valid",
      "message": "Please check filled values."
    },
    "LONG_RUNNING_TASK_FAILED": {
      "title": "Task run failed",
      "message": "Task run [{{taskType}}] on instance [{{instanceId}}] failed."
    },
    "SCHEDULER_INVALID_CRON_EXPRESSION": {
      "title": "Invalid cron expression",
      "message": "Setted cron expression [{{cron}}] is invalid."
    },
    "LONG_RUNNING_TASK_INTERRUPT": {
      "title": "Task run was canceled",
      "message": "Task run [{{taskType}}] on instance [{{instanceId}}] was interrupted by end of thread."
    },
    "LONG_RUNNING_TASK_CANCELED_BY_RESTART": {
      "title": "Task run was canceled",
      "message": "Task run [{{taskType}}] on instance [{{instanceId}}] was interrupted - instance was canceled during processing."
    },
    "LONG_RUNNING_TASK_NOT_RUNNING": {
      "title": "The task is already running",
      "message": "Task [{{taskType}}] on instance [{{instanceId}}] already finished."
    },
    "LONG_RUNNING_TASK_INIT_FAILED": {
      "title": "Task has invalid configuration",
      "message": "Task [{{taskType}}] has invalid configuration."
    },
    "LONG_RUNNING_TASK_IS_PROCESSED": {
      "title": "Task is already processed",
      "message": "Task [{{taskId}}] is already processed - can not be started twice."
    },
    "LONG_RUNNING_TASK_IS_RUNNING": {
      "title": "Task is already running",
      "message": "Task [{{taskId}}] is already running - can not be started twice."
    },
    "FOREST_INDEX_DISABLED": {
      "title": "Index is inactive",
      "message": "Tree structure indexing is inactive. Enable configuration property {{property}}."
    },
    "FOREST_INDEX_RUNNING": {
      "title": "Reindex already running",
      "message": "Reindex for tree structure {{type}} already running."
    },
    "NOTIFICATION_SYSTEM_TEMPLATE_DELETE_FAILED": {
      "title": "System template cant be deleted",
      "message": "[{{template}}] is system template, it can't be deleted."
    },
    "NOTIFICATION_TOPIC_AND_LEVEL_EXISTS": {
      "title": "Configuration can not be saved",
      "message": "Topic [{{topic}}] and null level exists!."
    },
    "NOTIFICATION_CONFIGURATION_RECIPIENT_NOT_FOUND": {
      "title": "Configuration can not be saved",
      "message": "Recipients are required for redirected notifications with topic [{{topic}}]."
    },
    "FORM_DEFINITION_DELETE_FAILED_SYSTEM_DEFINITION": {
      "title": "Form definition can not be deleted",
      "message": "Definition [{{name}}] it can't be deleted, because is flagged as system."
    },
    "FORM_ATTRIBUTE_DELETE_FAILED_SYSTEM_ATTRIBUTE": {
      "title": "Attribute definition can not be deleted",
      "message": "Attribute [{{name}}] it can't be deleted, because is flagged as system."
    },
    "FORM_ATTRIBUTE_DELETE_FAILED_HAS_VALUES": {
      "title": "Form attribute can not be deleted",
      "message": "Form attribute cannot be deleted - some form values already using this attribute."
    },
    "ACCEPTED": {
      "title": "Request added",
      "message": "Request will be processed / approved."
    },
    "ROLE_REQUEST_EXECUTED_CANNOT_DELETE": {
      "title": "Request for change permission cannot be deleted",
      "message": "Request for change permission in state 'Executed' cannot be delete!"
    },
    "ROLE_REQUEST_APPLICANTS_NOT_SAME": {
      "title": "Request for change permission have not same applicants",
      "message": "Some concepts have not same applicant [{{applicant}}]!"
    },
    "ROLE_REQUEST_NO_EXECUTE_IMMEDIATELY_RIGHT": {
      "title": "You do not have permission to start request for permission changes without approval.",
      "message": "You do not have permission (EXECUTE IMMEDIATELY) to start request for permission changes without approval!"
    },
    "CRYPT_DEMO_KEY_NOT_FOUND": {
      "title": "Demo key was not found",
      "message": "Encryption and decryption into the local repository is not possible."
    },
    "CRYPT_INITIALIZATION_PROBLEM": {
      "title": "Error in initializing an encryption tool",
      "message": "Encryption and decryption into the local repository is not possible."
    },
    "UNMODIFIABLE_ATTRIBUTE_CHANGE": {
      "title": "Attribute {{name}} can't change",
      "message": "Attribute {{name}} in entity {{class}} can't change."
    },
    "UNMODIFIABLE_DELETE_FAILED": {
      "title": "Record cannot be deleted",
      "message": "Unmodifiable record [{{record}}] cannot be deleted."
    },
    "PASSWORD_EXPIRATION_TASK_DAYS_BEFORE": {
      "title": "Task has invalid configuration",
      "message": "Attribute 'days before' is required and has to be number greater than zero, given [{{daysBefore}}]."
    },
    "PASSWORD_EXPIRED": {
      "title": "Password expired",
      "message": "Password couldn't be used for login."
    },
    "RECAPTCHA_SECRETKEY_MISSING": {
      "title": "Application configuration",
      "message": "Configuration property for recaptcha [{{property}}] is missing. Add please configuration item."
    },
    "RECAPTCHA_CHECK_FAILED": {
      "title": "Recaptcha check",
      "message": "Recaptcha failed: [{{errors}}]."
    },
    "RECAPTCHA_SERVICE_UNAVAILABLE": {
      "title": "Recaptcha check",
      "message": "Recaptcha service is unavailable."
    },
    "BACKUP_FOLDER_NOT_FOUND": {
      "title": "Folder for backup don't exists",
      "message": "Please specify this property: [{{property}}] in configuration properties."
    },
    "ROLE_DELETE_FAILED_HAS_TREE_NODE": {
      "title": "Role cannot be deleted",
      "message": "Role [{{role}}] has assigned automatic roles. Remove automatic roles at first."
    },
    "TREE_NODE_DELETE_FAILED_HAS_ROLE": {
      "title": "Tree node cannot be deleted",
      "message": "Node [{{treeNode}}] has assigned automatic roles. Remove automatic roles at first."
    },
    "ROLE_TREE_NODE_TYPE_EXISTS": {
      "title": "A similar definition of an automatic role already exists",
      "message": "For this role, the tree structure element and recursion type already exists element."
    },
    "IDENTITY_ALREADY_DISABLED_MANUALLY": {
      "title": "User is already deactivated",
      "message": "User [{{username}}] is already deactivated manually. Cannot be deactivated twice."
    },
    "IDENTITY_NOT_DISABLED_MANUALLY": {
      "title": "User is not deactivated manually",
      "message": "User [{{username}}] cannot be activated manually. Only manually deactivated user can be activated."
    },
    "DRY_RUN": {
      "title": "Dry run",
      "message": "Demo process."
    },
    "FORM_ATTRIBUTE_DELETE_FAILED_AUTOMATIC_ROLE_RULE_ASSIGNED": {
      "title": "Form attribute can not be deleted",
      "message": "Attribute [{{formAttribute}}] can not be deleted, because is used in the rule/rules by automatic role based on attribute."
    },
    "ROLE_DELETE_FAILED_AUTOMATIC_ROLE_ASSIGNED": {
      "title": "Role nelze smazat",
      "message": "Role [{{role}}] can not be deleted, because is used in the rule/rules by automatic role based on attribute."
    },
    "SCHEDULER_DRY_RUN_NOT_SUPPORTED": {
      "title": "Dry run is not supported",
      "message": "Dry run (demo process) is not supported for task type [{{taskType}}]."
    },
    "AUTOMATIC_ROLE_RULE_PERSISTENT_TYPE_TEXT": {
      "title": "Attribute type 'TEXT' is not supported",
      "message": "Extended attribute type 'TEXT' is not supported."
    },
    "AUTOMATIC_ROLE_REQUEST_START_WITHOUT_RULE": {
      "title": "Request for automatic role must have at least on rule!",
      "message": "Request for automatic role [{{request}}] must have at least on rule!"
    },
    "EVENT_CANCELED_BY_RESTART": {
      "title": "Event was canceled",
      "message": "Event [{{eventType}}] on instance [{{instanceId}}] was interrupted - instance was canceled during processing."
    },
    "EVENT_DUPLICATE_CANCELED": {
      "title": "Event was not executed",
      "message": "Event was not executed - duplicate event for the same owner, type and with the same properties was found."
    },
    "EVENT_ALREADY_CLOSED": {
      "title": "Event is already closed",
      "message": "Event is already closed, will be saved only (log)."
    },
    "EVENT_ACCEPTED": {
      "title": "Tasks started",
      "message": "Tasks will be processed on background:"
    },
    "EVENT_EXECUTE_FAILED": {
      "title": "Event failed",
      "message": "Event execution failed."
    },
    "EVENT_EXECUTE_PROCESSOR_FAILED": {
      "title": "Event failed",
      "message": "Event execution failed in processor [{{processor}}]."
    },
    "EVENT_CONTENT_DELETED": {
      "title": "Event content was deleted",
      "message": "Event content was deleted, event cannot be executed anymore."
    },
    "EVENT_NOT_FOUND": {
      "title": "Not found",
      "message": "Event does not exist, processed events are deleted automatically."
    },
    "IDENTITYIMAGE_WRONG_FORMAT": {
      "title": "Wrong format",
      "message": "File has got image suffix but It's not an image. File should contains image in one of this formats: jpg, png, gif"
    },
    "BULK_ACTION_REQUIRED_PROPERTY": {
      "title": "Required property wasn't filled",
      "message": "Property [{{attributeCode}}] wasn't filled."
    },
    "BULK_ACTION_ROLE_NOT_FOUND": {
      "title": "Roles not found",
      "message": "Roles for remove not found for identity: [{{identity}}]."
    },
    "BULK_ACTION_IDENTITY_REMOVE_ROLE_FAILED": {
      "title": "Roles not removed",
      "message": "Roles for identity [{{identity}}] not removed. Roles not found or cannot be removed (its automatic role, business role or for insufficient permissions)."
    },
    "BULK_ACTION_CONTRACT_NOT_FOUND": {
      "title": "Contract not found",
      "message": "Contract for identity: [{{identity}}] not found."
    },
    "BULK_ACTION_ONLY_ONE_FILTER_CAN_BE_APPLIED": {
      "title": "Bulk action can not be started",
      "message": "Only one filtering option can be applied."
    },
    "BULK_ACTION_MODULE_DISABLED": {
      "title": "Bulk action can not be started",
      "message": "Action [{{action}}] can't be processed. Module [{{module}}] is disabled."
    },
      "BULK_ACTION_ENTITIES_ARE_NOT_SPECIFIED": {
      "title": "Bulk action can not be started",
      "message": "Bulk action hasn't specified entities or filter."
    },
    "BULK_ACTION_BAD_FILTER": {
      "title": "Bulk action can not be started",
      "message": "Filter must be instance of [{{filter}}], given instance [{{givenFilter}}]."
    },
    "CONTRACT_IS_CONTROLLED_CANNOT_BE_DELETED": {
      "title": "Contract cannot be deleted!",
      "message": "Contract {{contractId}} cannot be deleted, because is controlled by time slices! Contract will be removed, when last of slice will be deleted. (Contract identifier [{{contractId}}])"
    },
    "PASSWORD_POLICY_BLOCK_TIME_IS_REQUIRED": {
      "title": "The [{{definition}}] policy does not have a user lockout timeout defined!",
      "message": "The [[{definition}}] policy defines the maximum number of logon attempts but does not have a user lockout timeout defined!"
    },
    "PASSWORD_CHANGE_ACCOUNT_SUCCESS": {
      "title": "Password was changed",
      "message": "Password change for account [{{account}}] was successful."
    },
    "OK": {
      "title": "Operation was successful",
      "message": "Request was successfully completed."
    },
    "DELETED": {
      "title": "Record deleted",
      "message": "Record will be deleted."
    },
    "AUTHORIZATION_POLICY_GROUP_AUTHORIZATION_TYPE": {
      "title": "Missing attribute 'groupPermission'",
      "message": "When authorization type is filled, then attribute 'groupPermission' must be filled to."
    },
    "AUTOMATIC_ROLE_ASSIGN_TASK_NOT_COMPLETE": {
      "title": "Role wasn't assigned",
      "message": "Role [{{role}}] wasn't assigned by automatic role [{{roleTreeNode}}] for identity [{{identity}}]. Check role request agenda for reason."
    },
    "AUTOMATIC_ROLE_ALREADY_ASSIGNED": {
      "title": "Role was already assigned",
      "message": "Role [{{role}}] was already assigned by automatic role [{{roleTreeNode}}] for identity [{{identity}}]."
    },
    "AUTOMATIC_ROLE_REMOVE_TASK_ADD_RUNNING": {
      "title": "Role is used by concurrent task",
      "message": "Automatic role [{{roleTreeNode}}] is used by concurrent task [{{taskId}}], wait for task completion."
    },
    "AUTOMATIC_ROLE_REMOVE_TASK_NOT_COMPLETE": {
      "title": "Role wasn't removed",
      "message": "Role [{{role}}] wasn't removed by automatic role [{{roleTreeNode}}] for identity [{{identity}}], Check role request agenda for reason."
    },
    "AUTOMATIC_ROLE_REMOVE_TASK_RUN_CONCURRENTLY": {
      "title": "Role is used by concurrent task",
      "message": "Automatic role [{{roleTreeNode}}] is used by concurrent task [{{taskId}}]."
    },
    "AUTOMATIC_ROLE_RULE_ATTRIBUTE_EMPTY": {
      "title": "Some attributes are missing",
      "message": "Rule for automatic role didn't fill all necessary attributes: [{{attrs}}]."
    },
    "AUTOMATIC_ROLE_TASK_EMPTY": {
      "title": "Missing 'id' of automatic role",
      "message": "Id of automatic role is required."
    },
    "BACKUP_FAIL": {
      "title": "Backup failed",
      "message": "Backup for script [{{script}}] failed. Error: [{{error}}]."
    },
    "DEPLOY_ERROR": {
      "title": "Deployment of entity failed",
      "message": "Deploying entity from path [{{path}}] failed."
    },
    "FORM_VALUE_WRONG_TYPE": {
      "title": "Wrong format of attributes",
      "message": "Value [{{value}}] of attribute [{{attr}}] must be type of [{{type}}] instead of [{{currentType}}]."
    },
    "GROOVY_SCRIPT_EXCEPTION": {
      "title": "Error in script",
      "message": "Script contains following errors: [{{errors}}]."
    },
    "GROOVY_SCRIPT_INVALID_CATEGORY": {
      "title": "Wrong category for script",
      "message": "Script is using script from wrong category [{{category}}]."
    },
    "GROOVY_SCRIPT_NOT_ACCESSIBLE_CLASS": {
      "title": "Class is not accessible",
      "message": "Class [{{class}}] is not accessible!"
    },
    "GROOVY_SCRIPT_NOT_ACCESSIBLE_SERVICE": {
      "title": "Service is not accessible",
      "message": "Service [{{service}}] is not accessible!"
    },
    "LONG_RUNNING_TASK_DIFFERENT_INSTANCE": {
      "title": "Task has multiple instances",
      "message": "Task [{{task}}] has other instance {{instance}}], because of it, it's not accessible from this one{{thisInstance}}]."
    },
    "LONG_RUNNING_TASK_NOT_FOUND": {
      "title": "Can not create instance",
      "message": "Can not create instance for task type [{{taskType}}]."
    },
    "NOTIFICATION_TEMPLATE_ERROR_XML_SCHEMA": {
      "title": "Can not load template",
      "message": "Can not load template [{{template}}], Error in XML schema."
    },
    "NULL_ATTRIBUTE": {
      "title": "Attribute is NULL",
      "message": "Attribute 'null' is NULL."
    },
    "ROLE_REQUEST_AUTOMATICALLY_NOT_ALLOWED": {
      "title": "Wrong value",
      "message": "Attribute 'requested by' in request [{{request}}] can not have value 'AUTOMATICALLY' via REST API."
    },
    "ROLE_REQUEST_EXECUTE_WRONG_STATE": {
      "title": "Wrong state of request",
      "message": "Request is in state [{{state}}], Allowed states, which can be executed are APPROVED a CONCEPT."
    },
    "SCHEDULER_UNSUPPORTED_TASK_TRIGGER": {
      "title": "Unsupported trigger",
      "message": "Task trigger [{{trigger}}] is not supported."
    },
    "TREE_NODE_BAD_CHILDREN": {
      "title": "Wrong node children",
      "message": "Tree node [{{node}}] has bad children."
    },
    "SEARCH_ERROR": {
      "title": "Search error",
      "message": "Error during searching entities. Error: [{{error}}]."
    },
    "WF_WARNING": {
      "title": "Workflow execution warning",
      "message": "Warning occurred during workflow execution. Warning: [{{warning}}]."
    },
    "XML_JAXB_INIT_ERROR": {
      "title": "Init JAXB instance failed",
      "message": "Can not perform init of JAXB instance."
    },
    "AUTH_EXPIRED": {
      "title": "Authorization expired",
      "message": "Authorization expired."
    },
    "ATTACHMENT_DATA_NOT_FOUND": {
      "title": "Data for attachment not found",
      "message": "Binary data for attachment: [{{one}}:{{two}}] - [{{three}}] not found."
    },
    "NOTIFICATION_TEMPLATE_XML_FILE_NOT_FOUND": {
      "title": "Template not found",
      "message": "XML file for template [{{template}}] not found."
    },
    "SCRIPT_XML_FILE_NOT_FOUND": {
      "title": "File not found",
      "message": "XML file for script [{{script}}] not found."
    },
    "METHOD_NOT_ALLOWED": {
      "title": "Method not allowed",
      "message": "This method is not allowed!"
    },
    "FILTER_IMPLEMENTATION_NOT_FOUND": {
      "title": "Filter not found",
      "message": "Filter [{{filter}}] for attribute [{{property}}] not found. Fix configuration property [{{repairProperty}}]."
    },
    "FORM_DEFINITION_INCOMPATIBLE_CHANGE": {
      "title": "Can not update form definition",
      "message": "Form definition [{{form}}][{{form1}}] can not be updated. Can not automatically update property [{{property}}] of attribute [{{attr}}]. Provide change script for updating form definition or define new form definition."
    },
    "NOTIFICATION_SENDER_IMPLEMENTATION_NOT_FOUND": {
      "title": "Sender not found",
      "message": "Sender [{{sender}}] for type [{{type}}] not found. Fix configuration property [{{repairProperty}}]."
    },
    "NOTIFICATION_TEMPLATE_MORE_CODE_FOUND": {
      "title": "More then one template was found",
      "message": "More then one template was found for code: [{{code}}]."
    },
    "NOTIFICATION_NOT_SENT": {
      "title": "Notification not sent",
      "message": "Notification configuration for topic [{{topic}}] not found or is disabled."
    },
    "PASSWORD_CHANGE_ACCOUNT_FAILED": {
      "title": "Password change failed",
      "message": "Can not change password in these accounts: [{{accounts}}]."
    },
    "ROLE_DELETE_FAILED_IDENTITY_ASSIGNED": {
      "title": "Role can not be deleted",
      "message": "Can not delete role [{{role}}], because is assigned to some identities."
    },
    "SCRIPT_MORE_CODE_FOUND": {
      "title": "More then one script was found",
      "message": "More then one script was found for code: [{{code}}]."
    },
    "UNMODIFIABLE_LOCKED": {
      "title": "Can not change entity",
      "message": "Entity [{{entity}}] can not be changed, because it's locked."
    },
    "ATTACHMENT_CREATE_FAILED": {
      "title": "Creation of attachment failed",
      "message": "Creation of attachment [{{attachment}}] with owner [{{owner}}][{{owner1}}] failed."
    },
    "ATTACHMENT_CREATE_TEMP_FILE_FAILED": {
      "title": "Creation of temp file failed",
      "message": "Creation of temp file [{{file}}] in temp dir [{{folder}}] failed."
    },
    "ATTACHMENT_INIT_DEFAULT_STORAGE_FAILED": {
      "title": "Can not create default storage",
      "message": "Creation of folder for default storage [{{storage}}] in temp dir failed."
    },
    "ATTACHMENT_INIT_DEFAULT_TEMP_FAILED": {
      "title": "Can no create default temp storage",
      "message": "Creation of folder for temp default storage [{{storage}}] in temp dir failed."
    },
    "ATTACHMENT_UPDATE_FAILED": {
      "title": "Update of attachment failed",
      "message": "Update of attachment [{{attachment}}] with owner [{{owner}}][{{owner1}}] failed."
    },
    "INTERNAL_SERVER_ERROR": {
      "title": "Server error",
      "message": "Some error occurred on server."
    },
    "NOT_IMPLEMENTED": {
      "title": "Not implemented",
      "message": "Function [{{function}}] not implemented."
    },
    "NOT_SUPPORTED": {
      "title": "Not supported",
      "message": "Function [{{function}}] not supported."
    },
    "RECAPTCHA_SECRET_KEY_MISSING": {
      "title": "Wrong Recaptcha configuration",
      "message": "Recaptcha has wrong configuration. Please set missing attribute [{{attr}}]."
    },
    "SCHEDULER_CREATE_TASK_FAILED": {
      "title": "Task creation failed",
      "message": "[{{error}}]."
    },
    "SCHEDULER_CREATE_TRIGGER_FAILED": {
      "title": "Trigger creation failed",
      "message": "[{{error}}]."
    },
    "SCHEDULER_DELETE_TASK_FAILED": {
      "title": "Task deleting failed",
      "message": "[{{error}}]."
    },
    "SCHEDULER_DELETE_TRIGGER_FAILED": {
      "title": "Trigger deleting failed",
      "message": "[{{error}}]."
    },
    "SCHEDULER_INTERRUPT_TASK_FAILED": {
      "title": "Task interruption failed",
      "message": "[{{error}}]."
    },
    "SCHEDULER_PAUSE_TRIGGER_FAILED": {
      "title": "Task pause failed",
      "message": "[{{error}}]."
    },
    "SCHEDULER_RESUME_TRIGGER_FAILED": {
      "title": "Task resume failed",
      "message": "[{{error}}]."
    },
    "WF_ERROR": {
      "title": "Error during workflow execution",
      "message": "During workflow execution, error occurred: [{{error}}]."
    },
    "WRONG_PROXY_CONFIG": {
      "title": "Wrong proxy configuration",
      "message": "Wrong configuration of http proxy. The required format is'[IP]:[PORT]'. For example: '153.25.16.8:1234'."
    },
    "ENTITY_TYPE_NOT_EXTERNAL_IDENTIFIABLE": {
      "title": "Entity type is not external identifiable",
      "message": "Entity type [{{entityType}}] is not external identifiable."
    },
    "ENTITY_TYPE_NOT_EXTERNAL_CODEABLE": {
      "title": "Entity type is not external codeable",
      "message": "Entity type [{{entityType}}] is not external codeable."
    },
    "DUPLICATE_EXTERNAL_ID": {
      "title": "Record already exists",
      "message": "Record with external identifier [{{externalId}}] already exists."
    },
    "DUPLICATE_EXTERNAL_CODE": {
      "title": "Record already exists",
      "message": "Record with personal number [{{externalCode}}] already exists."
    },
    "CORRELATION_PROPERTY_NOT_FOUND": {
      "title": "Correlation filter doesn't work",
      "message": "Correlation filter doesn't work, because the property [{{property}}] not exists!"
    },
    "CORRELATION_PROPERTY_WRONG_TYPE": {
      "title": "Correlation filter doesn't work",
      "message": "Correlation filter doesn't work, because the property [{{property}}] is not String!"
    },
    "TOKEN_NOT_FOUND": {
      "title": "Token not found",
      "message": "Authenticate token not found!"
    },
    "ROLE_DELETE_BULK_ACTION_NUMBER_OF_IDENTITIES": {
      "message": "Role <strong>{{role}}</strong> contains  <strong class=\"highlight\">{{count}}</strong> user relationships. <strong>Remove user relationships befor role delete.</strong>",
      "title": ""
    },
    "ROLE_COMPOSITION_ASSIGN_ROLE_FAILED": {
      "title": "Role wasn't assigned",
      "message": "Role [{{role}}] wasn't assigned."
    },
    "ROLE_COMPOSITION_ASSIGNED_ROLE_REMOVAL_FAILED": {
      "title": "Role wasn't removed",
      "message": "Assigned role [{{identityRole}}] wasn't removed."
    },
    "ROLE_DELETE_FAILED_HAS_COMPOSITION": {
      "title": "Role nelze smazat",
      "message": "Role [{{role}}] can not be deleted, because is used in the business role definition. Remove business role difinition at first."
    },
    "ROLE_COMPOSITION_REMOVE_TASK_ADD_RUNNING": {
      "title": "Business role is used by concurrent task",
      "message": "Business role [{{roleCompositionId}}] is used by concurrent task [{{taskId}}], wait for task completion."
    },
    "ROLE_COMPOSITION_REMOVE_TASK_RUN_CONCURRENTLY": {
      "title": "Role is removed by concurrent task",
      "message": "Business role [{{roleCompositionId}}] is removed by concurrent task [{{taskId}}]."
    },
    "GENERATOR_SCRIPT_RETURN_NULL_OR_BAD_DTO_TYPE": {
      "title": "Script for generated values returns an error state",
      "message": "Script [{{scriptCode}}] returned null, or wrong type of entity. Return value: [{{returnedValue}}]."
    },
    "GENERATOR_FORM_ATTRIBUTE_NOT_FOUND": {
      "title": "Form attribute for definition not found",
      "message": "Form attribute for definition [{{formDefinitionCode}}] with code [{{formAttributeCode}}] not found."
    },
    "GENERATOR_FORM_DEFINITION_BAD_TYPE": {
      "title": "Form definition has wrong type",
      "message": "Form definition id [{{formDefinitionId}}], has not type. Correct type: [{{dtoType}}]."
    },
    "IDMIDENTITY_USERNAME_NOTEMPTY": {
      "title": "Username cann't be empty",
      "message": "Username has not been filled. Please fill the username or enable the username generator."
    },
    "DTO_CANNOT_BE_CONVERT_TO_JSON": {
      "title": "DTO cannot be convert to the JSON!",
      "message": "DTO [{{dto}}] cannot be convert to the JSON!"
    },
    "JSON_CANNOT_BE_CONVERT_TO_DTO": {
      "title": "JSON cannot be convert to the DTO!",
      "message": "JSON [{{json}}] cannot be convert to the DTO!"
    },
    "REQUEST_CUD_OPERATIONS_NOT_ALLOWED": {
      "title": "CUD operations are not allowed on that REST controller [{{controller}}]!",
      "message": "CUD operations are not allowed on that REST controller [{{controller}}]! Use request REST endpoint."
    },
    "REQUEST_NO_EXECUTE_IMMEDIATELY_RIGHT": {
      "title": "You do not have right for immidiately execute request!",
      "message": "You do not have right (REQUEST_ADMIN) for immidiately execute request [{{request}}]!"
    },
    "REQUEST_ITEM_IS_NOT_VALID": {
      "title": "DTO [{{dto}}] in the request item is not valid!",
      "message": "DTO [{{dto}}] in the request item [{{item}}] is not valid!"
    },
    "REQUEST_NO_WF_DEF_FOUND": {
      "title": "No approval workflow definition found!",
      "message": "No approval workflow definition found for entity type [{{entityType}}]!"
    },
    "REQUEST_OWNER_WAS_DELETED": {
      "title": "Owner was deleted!",
      "message": "Owner [{{owner}}] was deleted!"
    },
    "REQUEST_OWNER_FROM_OTHER_REQUEST_WAS_DELETED": {
      "title": "Owner from other request was deleted!",
      "message": "Owner [{{owner}}] from other request [{{otherRequest}}] was deleted!"
    },
    "REQUEST_CANNOT_BE_EXECUTED_NONE_ITEMS": {
      "title": "Request cannot be executed. Has no request items!",
      "message": "Request [{{request}}] cannot be executed. Has no request items!"
    },
    "REQUEST_ITEM_CANNOT_BE_EXECUTED": {
      "title": "Request item [{{item}}] cannot be executed!",
      "message": "Request item [{{item}}] cannot be executed. Must be in state APPROVED or CONCEPT, but is in state [{{state}}]!"
    },
    "REQUEST_ITEM_CANNOT_BE_CREATED": {
      "title": "Request item cannot be created/changed for object [{{dto}}]!",
      "message": "Request item cannot be created/changed for object [{{dto}}]. Parent request must be in state INPROGRESS or CONCEPT or EXCEPTION, but is in state [{{state}}]!"
    },
    "REQUEST_ITEM_NOT_EXECUTED_PARENT_CANCELED": {
      "title": "Request item [{{item}}] could not be executed!",
      "message": "Request item [{{item}}] could not be executed, because is using DTO from terminated item [{{terminatedItem}}]!"
    },
    "REQUEST_EXECUTED_CANNOT_DELETE": {
      "title": "Request for change permission cannot be deleted",
      "message": "Request for change permission in state 'Executed' cannot be delete!"
    }
  },
  "validationError": {
    "string": {
      "min" : "Enter at least one character!",
      "min_plural" : "Enter at least {{count}} characters!",
      "base" : "Required field!",
      "email": "format of e-mail is not valid!",
      "max" : "Enter the maximum {{count}} character!",
      "max_plural" : "Enter the maximum {{count}} characters!"
    },
    "number": {
      "min" : "Min value is: {{count}}!",
      "base" : "Value must be number!",
      "max" : "Max value is: {{count}}!",
      "integer": "Integer number"
    },
    "boolean": {
      "base": "$t(validationError.string.base)"
    },
    "any": {
      "allowOnly": "Required field!",
      "empty" : "$t(validationError.string.base)",
      "required": "$t(validationError.any.allowOnly)"
    },
    "object" : {
      "base" : "$t(validationError.string.base)"
    },
    "array" : {
      "base" : "$t(validationError.string.base)",
      "min" : "Enter at least one item!",
      "min_plural" : "Enter at least {{count}} items!"
    },
    "date" : {
      "unvalid" : "Invalid date!"
    },
    "passwords_not_same": "Passwords must be the same!",
    "configurationSecured": "You don't have permissions to edit system configuration"
  },
  "security": {
    "access": {
      "denied": "Insufficient permissions",
      "link": {
        "denied": "You don't have permissions to see record details"
      }
    },
    "record": {
      "notFound" : "Record not found or insufficient permissions to read selected record."
    }
  }
}
